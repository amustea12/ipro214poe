/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.SpaceDto = factory(root.GatewaySoftwareApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The SpaceDto model module.
   * @module model/SpaceDto
   * @version v1
   */

  /**
   * Constructs a new <code>SpaceDto</code>.
   * The space
   * @alias module:model/SpaceDto
   * @class
   * @param name {String} The space name
   */
  var exports = function(name) {
    var _this = this;


    _this['name'] = name;








  };

  /**
   * Constructs a <code>SpaceDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SpaceDto} obj Optional instance to populate.
   * @return {module:model/SpaceDto} The populated <code>SpaceDto</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('mode')) {
        obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
      }
      if (data.hasOwnProperty('areZonesDisabled')) {
        obj['areZonesDisabled'] = ApiClient.convertToType(data['areZonesDisabled'], 'Boolean');
      }
      if (data.hasOwnProperty('state')) {
        obj['state'] = ApiClient.convertToType(data['state'], 'String');
      }
      if (data.hasOwnProperty('level')) {
        obj['level'] = ApiClient.convertToType(data['level'], 'Number');
      }
      if (data.hasOwnProperty('kelvin')) {
        obj['kelvin'] = ApiClient.convertToType(data['kelvin'], 'Number');
      }
      if (data.hasOwnProperty('hasTunableLights')) {
        obj['hasTunableLights'] = ApiClient.convertToType(data['hasTunableLights'], 'Boolean');
      }
      if (data.hasOwnProperty('minimumKelvin')) {
        obj['minimumKelvin'] = ApiClient.convertToType(data['minimumKelvin'], 'Number');
      }
      if (data.hasOwnProperty('maximumKelvin')) {
        obj['maximumKelvin'] = ApiClient.convertToType(data['maximumKelvin'], 'Number');
      }
    }
    return obj;
  }

  /**
   * The space ID
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The space name
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The space mode (Occupancy, Vacancy)
   * @member {String} mode
   */
  exports.prototype['mode'] = undefined;
  /**
   * Whether zones are disabled for this space
   * @member {Boolean} areZonesDisabled
   */
  exports.prototype['areZonesDisabled'] = undefined;
  /**
   * The space state (On, Off)
   * @member {String} state
   */
  exports.prototype['state'] = undefined;
  /**
   * The space level (0-10000)
   * @member {Number} level
   */
  exports.prototype['level'] = undefined;
  /**
   * The color temperature of the space in Kelvin
   * @member {Number} kelvin
   */
  exports.prototype['kelvin'] = undefined;
  /**
   * Whether the space has tunable lights
   * @member {Boolean} hasTunableLights
   */
  exports.prototype['hasTunableLights'] = undefined;
  /**
   * The minimum color temperature in Kelvin
   * @member {Number} minimumKelvin
   */
  exports.prototype['minimumKelvin'] = undefined;
  /**
   * The maximum color temperature in Kelvin
   * @member {Number} maximumKelvin
   */
  exports.prototype['maximumKelvin'] = undefined;



  return exports;
}));


