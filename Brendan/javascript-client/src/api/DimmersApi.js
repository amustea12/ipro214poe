/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateDimmerDto', 'model/CreateDimmerEventDto', 'model/DimmerDto', 'model/ListDtoDimmerDto', 'model/ListDtoEventDto', 'model/UpdateDimmerDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateDimmerDto'), require('../model/CreateDimmerEventDto'), require('../model/DimmerDto'), require('../model/ListDtoDimmerDto'), require('../model/ListDtoEventDto'), require('../model/UpdateDimmerDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.DimmersApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateDimmerDto, root.GatewaySoftwareApi.CreateDimmerEventDto, root.GatewaySoftwareApi.DimmerDto, root.GatewaySoftwareApi.ListDtoDimmerDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.UpdateDimmerDto);
  }
}(this, function(ApiClient, CreateDimmerDto, CreateDimmerEventDto, DimmerDto, ListDtoDimmerDto, ListDtoEventDto, UpdateDimmerDto) {
  'use strict';

  /**
   * Dimmers service.
   * @module api/DimmersApi
   * @version v1
   */

  /**
   * Constructs a new DimmersApi. 
   * @alias module:api/DimmersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the dimmersDelete operation.
     * @callback module:api/DimmersApi~dimmersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dimmer from the system
     * @param {Number} id the ID of the dimmer to be deleted
     * @param {module:api/DimmersApi~dimmersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dimmersDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dimmersDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/dimmers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersDiscover operation.
     * @callback module:api/DimmersApi~dimmersDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all dimmers in the system
     * @param {module:api/DimmersApi~dimmersDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dimmersDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/dimmers/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersEventPost operation.
     * @callback module:api/DimmersApi~dimmersEventPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dimmer event
     * @param {Number} id the ID of the dimmer
     * @param {module:model/CreateDimmerEventDto} event the event to be created
     * @param {module:api/DimmersApi~dimmersEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dimmersEventPost = function(id, event, callback) {
      var postBody = event;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dimmersEventPost");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling dimmersEventPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/dimmers/{id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersGet operation.
     * @callback module:api/DimmersApi~dimmersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDimmerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all dimmers in the system
     * @param {module:api/DimmersApi~dimmersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDimmerDto}
     */
    this.dimmersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDimmerDto;

      return this.apiClient.callApi(
        '/dimmers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersGetDimmer operation.
     * @callback module:api/DimmersApi~dimmersGetDimmerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DimmerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a dimmer
     * @param {Number} id the ID of the dimmer to be retrieved
     * @param {module:api/DimmersApi~dimmersGetDimmerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DimmerDto}
     */
    this.dimmersGetDimmer = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dimmersGetDimmer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DimmerDto;

      return this.apiClient.callApi(
        '/dimmers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersGetEvents operation.
     * @callback module:api/DimmersApi~dimmersGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of dimmer events
     * @param {Number} id the ID of the dimmer
     * @param {module:api/DimmersApi~dimmersGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.dimmersGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dimmersGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/dimmers/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersPost operation.
     * @callback module:api/DimmersApi~dimmersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a dimmer
     * @param {module:model/CreateDimmerDto} dimmer the dimmer to be created
     * @param {module:api/DimmersApi~dimmersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dimmersPost = function(dimmer, callback) {
      var postBody = dimmer;

      // verify the required parameter 'dimmer' is set
      if (dimmer === undefined || dimmer === null) {
        throw new Error("Missing the required parameter 'dimmer' when calling dimmersPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/dimmers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the dimmersPut operation.
     * @callback module:api/DimmersApi~dimmersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a dimmer
     * @param {Number} id the ID of the dimmer to be updated
     * @param {module:model/UpdateDimmerDto} dimmer a dimmer containing the new values
     * @param {module:api/DimmersApi~dimmersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.dimmersPut = function(id, dimmer, callback) {
      var postBody = dimmer;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling dimmersPut");
      }

      // verify the required parameter 'dimmer' is set
      if (dimmer === undefined || dimmer === null) {
        throw new Error("Missing the required parameter 'dimmer' when calling dimmersPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/dimmers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
