/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateLightSensorDto', 'model/CreateLightSensorEventDto', 'model/LightSensorDto', 'model/ListDtoEventDto', 'model/ListDtoLightSensorDto', 'model/UpdateLightSensorDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateLightSensorDto'), require('../model/CreateLightSensorEventDto'), require('../model/LightSensorDto'), require('../model/ListDtoEventDto'), require('../model/ListDtoLightSensorDto'), require('../model/UpdateLightSensorDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.LightSensorsApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateLightSensorDto, root.GatewaySoftwareApi.CreateLightSensorEventDto, root.GatewaySoftwareApi.LightSensorDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.ListDtoLightSensorDto, root.GatewaySoftwareApi.UpdateLightSensorDto);
  }
}(this, function(ApiClient, CreateLightSensorDto, CreateLightSensorEventDto, LightSensorDto, ListDtoEventDto, ListDtoLightSensorDto, UpdateLightSensorDto) {
  'use strict';

  /**
   * LightSensors service.
   * @module api/LightSensorsApi
   * @version v1
   */

  /**
   * Constructs a new LightSensorsApi. 
   * @alias module:api/LightSensorsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the lightSensorsDelete operation.
     * @callback module:api/LightSensorsApi~lightSensorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a light sensor from the system
     * @param {Number} id the ID of the light sensor to be deleted
     * @param {module:api/LightSensorsApi~lightSensorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lightSensorsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lightSensorsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lightsensors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsDiscover operation.
     * @callback module:api/LightSensorsApi~lightSensorsDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all light sensors in the system
     * @param {module:api/LightSensorsApi~lightSensorsDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lightSensorsDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lightsensors/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsEventPost operation.
     * @callback module:api/LightSensorsApi~lightSensorsEventPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a light sensor event
     * @param {Number} id the ID of the light sensor
     * @param {module:model/CreateLightSensorEventDto} event the event to be created
     * @param {module:api/LightSensorsApi~lightSensorsEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lightSensorsEventPost = function(id, event, callback) {
      var postBody = event;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lightSensorsEventPost");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling lightSensorsEventPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lightsensors/{id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsGet operation.
     * @callback module:api/LightSensorsApi~lightSensorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoLightSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all light sensors in the system
     * @param {module:api/LightSensorsApi~lightSensorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoLightSensorDto}
     */
    this.lightSensorsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoLightSensorDto;

      return this.apiClient.callApi(
        '/lightsensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsGetEvents operation.
     * @callback module:api/LightSensorsApi~lightSensorsGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of light sensor events
     * @param {Number} id the ID of the light sensor
     * @param {module:api/LightSensorsApi~lightSensorsGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.lightSensorsGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lightSensorsGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/lightsensors/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsGetLightSensor operation.
     * @callback module:api/LightSensorsApi~lightSensorsGetLightSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LightSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a light sensor
     * @param {Number} id the ID of the light sensor to be retrieved
     * @param {module:api/LightSensorsApi~lightSensorsGetLightSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LightSensorDto}
     */
    this.lightSensorsGetLightSensor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lightSensorsGetLightSensor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = LightSensorDto;

      return this.apiClient.callApi(
        '/lightsensors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsPost operation.
     * @callback module:api/LightSensorsApi~lightSensorsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a light sensor
     * @param {module:model/CreateLightSensorDto} lightSensor the light sensor to be created
     * @param {module:api/LightSensorsApi~lightSensorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lightSensorsPost = function(lightSensor, callback) {
      var postBody = lightSensor;

      // verify the required parameter 'lightSensor' is set
      if (lightSensor === undefined || lightSensor === null) {
        throw new Error("Missing the required parameter 'lightSensor' when calling lightSensorsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/lightsensors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the lightSensorsPut operation.
     * @callback module:api/LightSensorsApi~lightSensorsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a light sensor
     * @param {Number} id the ID of the light sensor to be updated
     * @param {module:model/UpdateLightSensorDto} lightSensor a light sensor containing the new values
     * @param {module:api/LightSensorsApi~lightSensorsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.lightSensorsPut = function(id, lightSensor, callback) {
      var postBody = lightSensor;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling lightSensorsPut");
      }

      // verify the required parameter 'lightSensor' is set
      if (lightSensor === undefined || lightSensor === null) {
        throw new Error("Missing the required parameter 'lightSensor' when calling lightSensorsPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/lightsensors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
