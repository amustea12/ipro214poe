/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActionSetDto', 'model/CreateActionSetDto', 'model/ListDtoActionSetDto', 'model/ListDtoEventDto', 'model/UpdateActionSetDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActionSetDto'), require('../model/CreateActionSetDto'), require('../model/ListDtoActionSetDto'), require('../model/ListDtoEventDto'), require('../model/UpdateActionSetDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.ActionSetsApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.ActionSetDto, root.GatewaySoftwareApi.CreateActionSetDto, root.GatewaySoftwareApi.ListDtoActionSetDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.UpdateActionSetDto);
  }
}(this, function(ApiClient, ActionSetDto, CreateActionSetDto, ListDtoActionSetDto, ListDtoEventDto, UpdateActionSetDto) {
  'use strict';

  /**
   * ActionSets service.
   * @module api/ActionSetsApi
   * @version v1
   */

  /**
   * Constructs a new ActionSetsApi. 
   * @alias module:api/ActionSetsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the actionSetsDelete operation.
     * @callback module:api/ActionSetsApi~actionSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an action set from the system
     * @param {Number} id the ID of the action set to be deleted
     * @param {module:api/ActionSetsApi~actionSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionSetsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionSetsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsExecute operation.
     * @callback module:api/ActionSetsApi~actionSetsExecuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes an action set
     * @param {Number} id the ID of the action set to be executed
     * @param {module:api/ActionSetsApi~actionSetsExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionSetsExecute = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionSetsExecute");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsGet operation.
     * @callback module:api/ActionSetsApi~actionSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoActionSetDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of action sets in the system
     * @param {module:api/ActionSetsApi~actionSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoActionSetDto}
     */
    this.actionSetsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoActionSetDto;

      return this.apiClient.callApi(
        '/actionsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsGetActionSet operation.
     * @callback module:api/ActionSetsApi~actionSetsGetActionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionSetDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an action set
     * @param {Number} id the ID of the action set to be retrieved
     * @param {module:api/ActionSetsApi~actionSetsGetActionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionSetDto}
     */
    this.actionSetsGetActionSet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionSetsGetActionSet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ActionSetDto;

      return this.apiClient.callApi(
        '/actionsets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsGetEvents operation.
     * @callback module:api/ActionSetsApi~actionSetsGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of action set events
     * @param {Number} id the ID of the action set
     * @param {module:api/ActionSetsApi~actionSetsGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.actionSetsGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionSetsGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/actionsets/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsPost operation.
     * @callback module:api/ActionSetsApi~actionSetsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an action set
     * @param {module:model/CreateActionSetDto} actionSet the action set to be created
     * @param {module:api/ActionSetsApi~actionSetsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionSetsPost = function(actionSet, callback) {
      var postBody = actionSet;

      // verify the required parameter 'actionSet' is set
      if (actionSet === undefined || actionSet === null) {
        throw new Error("Missing the required parameter 'actionSet' when calling actionSetsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionSetsPut operation.
     * @callback module:api/ActionSetsApi~actionSetsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an action set
     * @param {Number} id the ID of the action set to be updated
     * @param {module:model/UpdateActionSetDto} actionSet the updated values for the action set
     * @param {module:api/ActionSetsApi~actionSetsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionSetsPut = function(id, actionSet, callback) {
      var postBody = actionSet;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling actionSetsPut");
      }

      // verify the required parameter 'actionSet' is set
      if (actionSet === undefined || actionSet === null) {
        throw new Error("Missing the required parameter 'actionSet' when calling actionSetsPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
