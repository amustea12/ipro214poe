/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApplicationKeyDto', 'model/CreateApplicationKeyDto', 'model/ListDtoApplicationKeyDto', 'model/UpdateApplicationKeyDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApplicationKeyDto'), require('../model/CreateApplicationKeyDto'), require('../model/ListDtoApplicationKeyDto'), require('../model/UpdateApplicationKeyDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.ApplicationKeysApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.ApplicationKeyDto, root.GatewaySoftwareApi.CreateApplicationKeyDto, root.GatewaySoftwareApi.ListDtoApplicationKeyDto, root.GatewaySoftwareApi.UpdateApplicationKeyDto);
  }
}(this, function(ApiClient, ApplicationKeyDto, CreateApplicationKeyDto, ListDtoApplicationKeyDto, UpdateApplicationKeyDto) {
  'use strict';

  /**
   * ApplicationKeys service.
   * @module api/ApplicationKeysApi
   * @version v1
   */

  /**
   * Constructs a new ApplicationKeysApi. 
   * @alias module:api/ApplicationKeysApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the applicationKeysDelete operation.
     * @callback module:api/ApplicationKeysApi~applicationKeysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an application key from the system
     * @param {Number} id the ID of the application key to be deleted
     * @param {module:api/ApplicationKeysApi~applicationKeysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.applicationKeysDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationKeysDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicationkeys/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationKeysGet operation.
     * @callback module:api/ApplicationKeysApi~applicationKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoApplicationKeyDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all application keys in the system
     * @param {module:api/ApplicationKeysApi~applicationKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoApplicationKeyDto}
     */
    this.applicationKeysGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoApplicationKeyDto;

      return this.apiClient.callApi(
        '/applicationkeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationKeysGetApplicationKey operation.
     * @callback module:api/ApplicationKeysApi~applicationKeysGetApplicationKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationKeyDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an application key
     * @param {Number} id the ID of the application key to be retrieved
     * @param {module:api/ApplicationKeysApi~applicationKeysGetApplicationKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationKeyDto}
     */
    this.applicationKeysGetApplicationKey = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationKeysGetApplicationKey");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ApplicationKeyDto;

      return this.apiClient.callApi(
        '/applicationkeys/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationKeysPost operation.
     * @callback module:api/ApplicationKeysApi~applicationKeysPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application key
     * @param {module:model/CreateApplicationKeyDto} applicationKey the application key
     * @param {module:api/ApplicationKeysApi~applicationKeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.applicationKeysPost = function(applicationKey, callback) {
      var postBody = applicationKey;

      // verify the required parameter 'applicationKey' is set
      if (applicationKey === undefined || applicationKey === null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling applicationKeysPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicationkeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationKeysPut operation.
     * @callback module:api/ApplicationKeysApi~applicationKeysPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an application key
     * @param {Number} id the ID of the application key to be updated
     * @param {module:model/UpdateApplicationKeyDto} applicationKey the updated values for the aplication key
     * @param {module:api/ApplicationKeysApi~applicationKeysPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.applicationKeysPut = function(id, applicationKey, callback) {
      var postBody = applicationKey;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationKeysPut");
      }

      // verify the required parameter 'applicationKey' is set
      if (applicationKey === undefined || applicationKey === null) {
        throw new Error("Missing the required parameter 'applicationKey' when calling applicationKeysPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/applicationkeys/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
