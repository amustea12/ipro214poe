/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActionDto', 'model/CreateActionDto', 'model/ListDtoActionDto', 'model/ListDtoEventDto', 'model/UpdateActionDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActionDto'), require('../model/CreateActionDto'), require('../model/ListDtoActionDto'), require('../model/ListDtoEventDto'), require('../model/UpdateActionDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.ActionsApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.ActionDto, root.GatewaySoftwareApi.CreateActionDto, root.GatewaySoftwareApi.ListDtoActionDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.UpdateActionDto);
  }
}(this, function(ApiClient, ActionDto, CreateActionDto, ListDtoActionDto, ListDtoEventDto, UpdateActionDto) {
  'use strict';

  /**
   * Actions service.
   * @module api/ActionsApi
   * @version v1
   */

  /**
   * Constructs a new ActionsApi. 
   * @alias module:api/ActionsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the actionsDelete operation.
     * @callback module:api/ActionsApi~actionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an action from the system
     * @param {Number} actionSetId the ID of the action set
     * @param {Number} actionId the ID of the action to be deleted
     * @param {module:api/ActionsApi~actionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionsDelete = function(actionSetId, actionId, callback) {
      var postBody = null;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsDelete");
      }

      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionsDelete");
      }


      var pathParams = {
        'actionSetId': actionSetId,
        'actionId': actionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions/{actionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsExecute operation.
     * @callback module:api/ActionsApi~actionsExecuteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Executes an action
     * @param {Number} actionSetId the ID of the action set
     * @param {Number} actionId the ID of the action to be executed
     * @param {module:api/ActionsApi~actionsExecuteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionsExecute = function(actionSetId, actionId, callback) {
      var postBody = null;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsExecute");
      }

      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionsExecute");
      }


      var pathParams = {
        'actionSetId': actionSetId,
        'actionId': actionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions/{actionId}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGet operation.
     * @callback module:api/ActionsApi~actionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoActionDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of actions contained within an action set
     * @param {Number} actionSetId the ID of the action set to be retrieved
     * @param {module:api/ActionsApi~actionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoActionDto}
     */
    this.actionsGet = function(actionSetId, callback) {
      var postBody = null;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsGet");
      }


      var pathParams = {
        'actionSetId': actionSetId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoActionDto;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetAction operation.
     * @callback module:api/ActionsApi~actionsGetActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an action
     * @param {Number} actionSetId the ID of the action set
     * @param {Number} actionId the ID of the action to be retrieved
     * @param {module:api/ActionsApi~actionsGetActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionDto}
     */
    this.actionsGetAction = function(actionSetId, actionId, callback) {
      var postBody = null;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsGetAction");
      }

      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionsGetAction");
      }


      var pathParams = {
        'actionSetId': actionSetId,
        'actionId': actionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ActionDto;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions/{actionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsGetEvents operation.
     * @callback module:api/ActionsApi~actionsGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of action events
     * @param {Number} actionSetId the ID of the action set
     * @param {Number} actionId the ID of the action
     * @param {module:api/ActionsApi~actionsGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.actionsGetEvents = function(actionSetId, actionId, callback) {
      var postBody = null;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsGetEvents");
      }

      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionsGetEvents");
      }


      var pathParams = {
        'actionSetId': actionSetId,
        'actionId': actionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions/{actionId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsPost operation.
     * @callback module:api/ActionsApi~actionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an action
     * @param {Number} actionSetId the ID of the action set
     * @param {module:model/CreateActionDto} action the action to be created
     * @param {module:api/ActionsApi~actionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionsPost = function(actionSetId, action, callback) {
      var postBody = action;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsPost");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling actionsPost");
      }


      var pathParams = {
        'actionSetId': actionSetId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the actionsPut operation.
     * @callback module:api/ActionsApi~actionsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an action
     * @param {Number} actionSetId the ID of the action set
     * @param {Number} actionId the ID of the action to be updated
     * @param {module:model/UpdateActionDto} action the updated values for the action
     * @param {module:api/ActionsApi~actionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.actionsPut = function(actionSetId, actionId, action, callback) {
      var postBody = action;

      // verify the required parameter 'actionSetId' is set
      if (actionSetId === undefined || actionSetId === null) {
        throw new Error("Missing the required parameter 'actionSetId' when calling actionsPut");
      }

      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling actionsPut");
      }

      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling actionsPut");
      }


      var pathParams = {
        'actionSetId': actionSetId,
        'actionId': actionId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/actionsets/{actionSetId}/actions/{actionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
