/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddDeviceToZoneDto', 'model/LightSensorDto', 'model/ListDtoDeviceDto', 'model/ListDtoEventDto', 'model/SpaceDto', 'model/UpdateZoneDto', 'model/ZoneDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddDeviceToZoneDto'), require('../model/LightSensorDto'), require('../model/ListDtoDeviceDto'), require('../model/ListDtoEventDto'), require('../model/SpaceDto'), require('../model/UpdateZoneDto'), require('../model/ZoneDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.ZonesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.AddDeviceToZoneDto, root.GatewaySoftwareApi.LightSensorDto, root.GatewaySoftwareApi.ListDtoDeviceDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.SpaceDto, root.GatewaySoftwareApi.UpdateZoneDto, root.GatewaySoftwareApi.ZoneDto);
  }
}(this, function(ApiClient, AddDeviceToZoneDto, LightSensorDto, ListDtoDeviceDto, ListDtoEventDto, SpaceDto, UpdateZoneDto, ZoneDto) {
  'use strict';

  /**
   * Zones service.
   * @module api/ZonesApi
   * @version v1
   */

  /**
   * Constructs a new ZonesApi. 
   * @alias module:api/ZonesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the zonesDelete operation.
     * @callback module:api/ZonesApi~zonesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a zone from the system
     * @param {Number} id the ID of the zone to be deleted
     * @param {module:api/ZonesApi~zonesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.zonesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/zones/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesDeleteLight operation.
     * @callback module:api/ZonesApi~zonesDeleteLightCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a light from a zone
     * @param {Number} id the ID of the zone
     * @param {Number} deviceId the ID of the light to be removed
     * @param {module:api/ZonesApi~zonesDeleteLightCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.zonesDeleteLight = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesDeleteLight");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling zonesDeleteLight");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/zones/{id}/lights/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesDeleteLightSensor operation.
     * @callback module:api/ZonesApi~zonesDeleteLightSensorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a light sensor from a zone
     * @param {Number} id the ID of the zone
     * @param {Number} deviceId the ID of the light sensor to be removed
     * @param {module:api/ZonesApi~zonesDeleteLightSensorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.zonesDeleteLightSensor = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesDeleteLightSensor");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling zonesDeleteLightSensor");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/zones/{id}/lightsensors/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetAssignableDevices operation.
     * @callback module:api/ZonesApi~zonesGetAssignableDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of devices that can be added to a zone
     * @param {Number} id the ID of the zone
     * @param {module:api/ZonesApi~zonesGetAssignableDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.zonesGetAssignableDevices = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetAssignableDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/zones/{id}/assignabledevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetDevices operation.
     * @callback module:api/ZonesApi~zonesGetDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of devices contained in a zone
     * @param {Number} id the ID of the zone
     * @param {module:api/ZonesApi~zonesGetDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.zonesGetDevices = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/zones/{id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetEvents operation.
     * @callback module:api/ZonesApi~zonesGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of zone events
     * @param {Number} id the ID of the zone
     * @param {module:api/ZonesApi~zonesGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.zonesGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/zones/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetLightSensor operation.
     * @callback module:api/ZonesApi~zonesGetLightSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LightSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the light sensor contained in a zone
     * @param {Number} id the ID of the zone
     * @param {module:api/ZonesApi~zonesGetLightSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LightSensorDto}
     */
    this.zonesGetLightSensor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetLightSensor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = LightSensorDto;

      return this.apiClient.callApi(
        '/zones/{id}/lightsensor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetSpace operation.
     * @callback module:api/ZonesApi~zonesGetSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the space containing a zone
     * @param {Number} id the ID of the zone
     * @param {module:api/ZonesApi~zonesGetSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceDto}
     */
    this.zonesGetSpace = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetSpace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SpaceDto;

      return this.apiClient.callApi(
        '/zones/{id}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesGetZone operation.
     * @callback module:api/ZonesApi~zonesGetZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ZoneDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a zone
     * @param {Number} id the ID of the zone to be returned
     * @param {module:api/ZonesApi~zonesGetZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ZoneDto}
     */
    this.zonesGetZone = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesGetZone");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ZoneDto;

      return this.apiClient.callApi(
        '/zones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesPut operation.
     * @callback module:api/ZonesApi~zonesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a zone
     * @param {Number} id the ID of the zone to be updated
     * @param {module:model/UpdateZoneDto} zone the updated values for the zone
     * @param {module:api/ZonesApi~zonesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.zonesPut = function(id, zone, callback) {
      var postBody = zone;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesPut");
      }

      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling zonesPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/zones/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the zonesPutDevices operation.
     * @callback module:api/ZonesApi~zonesPutDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a device to a zone
     * @param {Number} id the ID of the zone
     * @param {module:model/AddDeviceToZoneDto} device the device to be added to the zone
     * @param {module:api/ZonesApi~zonesPutDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.zonesPutDevices = function(id, device, callback) {
      var postBody = device;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling zonesPutDevices");
      }

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling zonesPutDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/zones/{id}/devices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
