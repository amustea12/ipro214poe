/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateTemperatureSensorDto', 'model/CreateTemperatureSensorEventDto', 'model/ListDtoEventDto', 'model/ListDtoTemperatureSensorDto', 'model/TemperatureSensorDto', 'model/UpdateTemperatureSensorDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateTemperatureSensorDto'), require('../model/CreateTemperatureSensorEventDto'), require('../model/ListDtoEventDto'), require('../model/ListDtoTemperatureSensorDto'), require('../model/TemperatureSensorDto'), require('../model/UpdateTemperatureSensorDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.TemperatureSensorsApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateTemperatureSensorDto, root.GatewaySoftwareApi.CreateTemperatureSensorEventDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.ListDtoTemperatureSensorDto, root.GatewaySoftwareApi.TemperatureSensorDto, root.GatewaySoftwareApi.UpdateTemperatureSensorDto);
  }
}(this, function(ApiClient, CreateTemperatureSensorDto, CreateTemperatureSensorEventDto, ListDtoEventDto, ListDtoTemperatureSensorDto, TemperatureSensorDto, UpdateTemperatureSensorDto) {
  'use strict';

  /**
   * TemperatureSensors service.
   * @module api/TemperatureSensorsApi
   * @version v1
   */

  /**
   * Constructs a new TemperatureSensorsApi. 
   * @alias module:api/TemperatureSensorsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the temperatureSensorsDelete operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a temperature sensor from the system
     * @param {Number} id the ID of the temperature sensor to be deleted
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.temperatureSensorsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling temperatureSensorsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/temperaturesensors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsDiscover operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all temperature sensors in the system
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.temperatureSensorsDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/temperaturesensors/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsEventPost operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsEventPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a temperature sensor event
     * @param {Number} id the ID of the temperature sensor
     * @param {module:model/CreateTemperatureSensorEventDto} event the event to be created
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.temperatureSensorsEventPost = function(id, event, callback) {
      var postBody = event;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling temperatureSensorsEventPost");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling temperatureSensorsEventPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/temperaturesensors/{id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsGet operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoTemperatureSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all temperature sensors in the system
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoTemperatureSensorDto}
     */
    this.temperatureSensorsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoTemperatureSensorDto;

      return this.apiClient.callApi(
        '/temperaturesensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsGetEvents operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of temperature sensor events
     * @param {Number} id the ID of the temperature sensor
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.temperatureSensorsGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling temperatureSensorsGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/temperaturesensors/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsGetTemperatureSensor operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsGetTemperatureSensorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemperatureSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a temperature sensor
     * @param {Number} id the ID of the temperature sensor to be retrieved
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsGetTemperatureSensorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemperatureSensorDto}
     */
    this.temperatureSensorsGetTemperatureSensor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling temperatureSensorsGetTemperatureSensor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = TemperatureSensorDto;

      return this.apiClient.callApi(
        '/temperaturesensors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsPost operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a temperature sensor
     * @param {module:model/CreateTemperatureSensorDto} temperatureSensor the temperature sensor to be created
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.temperatureSensorsPost = function(temperatureSensor, callback) {
      var postBody = temperatureSensor;

      // verify the required parameter 'temperatureSensor' is set
      if (temperatureSensor === undefined || temperatureSensor === null) {
        throw new Error("Missing the required parameter 'temperatureSensor' when calling temperatureSensorsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/temperaturesensors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the temperatureSensorsPut operation.
     * @callback module:api/TemperatureSensorsApi~temperatureSensorsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a temperature sensor
     * @param {Number} id the ID of the temperature sensor to be updated
     * @param {module:model/UpdateTemperatureSensorDto} temperatureSensor a temperature sensor containing the new values
     * @param {module:api/TemperatureSensorsApi~temperatureSensorsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.temperatureSensorsPut = function(id, temperatureSensor, callback) {
      var postBody = temperatureSensor;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling temperatureSensorsPut");
      }

      // verify the required parameter 'temperatureSensor' is set
      if (temperatureSensor === undefined || temperatureSensor === null) {
        throw new Error("Missing the required parameter 'temperatureSensor' when calling temperatureSensorsPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/temperaturesensors/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
