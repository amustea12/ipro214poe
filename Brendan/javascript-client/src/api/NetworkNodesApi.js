/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateNetworkNodeDto', 'model/ListDtoDeviceDto', 'model/ListDtoDeviceNodeDto', 'model/ListDtoNodeDto', 'model/NodeDto', 'model/UpdateNetworkNodeDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateNetworkNodeDto'), require('../model/ListDtoDeviceDto'), require('../model/ListDtoDeviceNodeDto'), require('../model/ListDtoNodeDto'), require('../model/NodeDto'), require('../model/UpdateNetworkNodeDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.NetworkNodesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateNetworkNodeDto, root.GatewaySoftwareApi.ListDtoDeviceDto, root.GatewaySoftwareApi.ListDtoDeviceNodeDto, root.GatewaySoftwareApi.ListDtoNodeDto, root.GatewaySoftwareApi.NodeDto, root.GatewaySoftwareApi.UpdateNetworkNodeDto);
  }
}(this, function(ApiClient, CreateNetworkNodeDto, ListDtoDeviceDto, ListDtoDeviceNodeDto, ListDtoNodeDto, NodeDto, UpdateNetworkNodeDto) {
  'use strict';

  /**
   * NetworkNodes service.
   * @module api/NetworkNodesApi
   * @version v1
   */

  /**
   * Constructs a new NetworkNodesApi. 
   * @alias module:api/NetworkNodesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the networkNodesDelete operation.
     * @callback module:api/NetworkNodesApi~networkNodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a network node from the system
     * @param {Number} id the ID of the network node to be deleted
     * @param {module:api/NetworkNodesApi~networkNodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.networkNodesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkNodesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/networknodes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesDeleteAll operation.
     * @callback module:api/NetworkNodesApi~networkNodesDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WARNING: Deletes all network nodes from the system.
     * @param {module:api/NetworkNodesApi~networkNodesDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.networkNodesDeleteAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/networknodes/deleteall', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesDiscover operation.
     * @callback module:api/NetworkNodesApi~networkNodesDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all network nodes in the system
     * @param {module:api/NetworkNodesApi~networkNodesDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.networkNodesDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/networknodes/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesGet operation.
     * @callback module:api/NetworkNodesApi~networkNodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoNodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all network nodes in the system
     * @param {module:api/NetworkNodesApi~networkNodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoNodeDto}
     */
    this.networkNodesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoNodeDto;

      return this.apiClient.callApi(
        '/networknodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesGetDeviceNodes operation.
     * @callback module:api/NetworkNodesApi~networkNodesGetDeviceNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceNodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of device nodes attached to a network node
     * @param {Number} id the ID of the network node
     * @param {module:api/NetworkNodesApi~networkNodesGetDeviceNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceNodeDto}
     */
    this.networkNodesGetDeviceNodes = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkNodesGetDeviceNodes");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceNodeDto;

      return this.apiClient.callApi(
        '/networknodes/{id}/devicenodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesGetDevices operation.
     * @callback module:api/NetworkNodesApi~networkNodesGetDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of devices attached to a network node
     * @param {Number} id the ID of the network node
     * @param {module:api/NetworkNodesApi~networkNodesGetDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.networkNodesGetDevices = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkNodesGetDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/networknodes/{id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesGetNode operation.
     * @callback module:api/NetworkNodesApi~networkNodesGetNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a network node
     * @param {Number} id the ID of the network node to be retrieved
     * @param {module:api/NetworkNodesApi~networkNodesGetNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeDto}
     */
    this.networkNodesGetNode = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkNodesGetNode");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = NodeDto;

      return this.apiClient.callApi(
        '/networknodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesPost operation.
     * @callback module:api/NetworkNodesApi~networkNodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a network node
     * @param {module:model/CreateNetworkNodeDto} networkNode the network node to be created
     * @param {module:api/NetworkNodesApi~networkNodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.networkNodesPost = function(networkNode, callback) {
      var postBody = networkNode;

      // verify the required parameter 'networkNode' is set
      if (networkNode === undefined || networkNode === null) {
        throw new Error("Missing the required parameter 'networkNode' when calling networkNodesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/networknodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the networkNodesPut operation.
     * @callback module:api/NetworkNodesApi~networkNodesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a network node
     * @param {Number} id the ID of the network node to be updated
     * @param {module:model/UpdateNetworkNodeDto} networkNode the updated values for the network node
     * @param {module:api/NetworkNodesApi~networkNodesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.networkNodesPut = function(id, networkNode, callback) {
      var postBody = networkNode;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling networkNodesPut");
      }

      // verify the required parameter 'networkNode' is set
      if (networkNode === undefined || networkNode === null) {
        throw new Error("Missing the required parameter 'networkNode' when calling networkNodesPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/networknodes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
