/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddDeviceToSpaceDto', 'model/CreatePolicyDto', 'model/CreateSpaceDto', 'model/CreateZoneDto', 'model/LightingDto', 'model/ListDtoActivePolicyValueDto', 'model/ListDtoDeviceDto', 'model/ListDtoDimmerDto', 'model/ListDtoEventDto', 'model/ListDtoLightDto', 'model/ListDtoLightSensorDto', 'model/ListDtoMotionSensorDto', 'model/ListDtoRelayDto', 'model/ListDtoSpaceDto', 'model/ListDtoSwitchDto', 'model/ListDtoTemperatureSensorDto', 'model/ListDtoZoneDto', 'model/PolicyDto', 'model/SpaceDto', 'model/SpaceTimerDto', 'model/SpaceTypeDto', 'model/UpdatePolicyDto', 'model/UpdateSpaceDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddDeviceToSpaceDto'), require('../model/CreatePolicyDto'), require('../model/CreateSpaceDto'), require('../model/CreateZoneDto'), require('../model/LightingDto'), require('../model/ListDtoActivePolicyValueDto'), require('../model/ListDtoDeviceDto'), require('../model/ListDtoDimmerDto'), require('../model/ListDtoEventDto'), require('../model/ListDtoLightDto'), require('../model/ListDtoLightSensorDto'), require('../model/ListDtoMotionSensorDto'), require('../model/ListDtoRelayDto'), require('../model/ListDtoSpaceDto'), require('../model/ListDtoSwitchDto'), require('../model/ListDtoTemperatureSensorDto'), require('../model/ListDtoZoneDto'), require('../model/PolicyDto'), require('../model/SpaceDto'), require('../model/SpaceTimerDto'), require('../model/SpaceTypeDto'), require('../model/UpdatePolicyDto'), require('../model/UpdateSpaceDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.SpacesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.AddDeviceToSpaceDto, root.GatewaySoftwareApi.CreatePolicyDto, root.GatewaySoftwareApi.CreateSpaceDto, root.GatewaySoftwareApi.CreateZoneDto, root.GatewaySoftwareApi.LightingDto, root.GatewaySoftwareApi.ListDtoActivePolicyValueDto, root.GatewaySoftwareApi.ListDtoDeviceDto, root.GatewaySoftwareApi.ListDtoDimmerDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.ListDtoLightDto, root.GatewaySoftwareApi.ListDtoLightSensorDto, root.GatewaySoftwareApi.ListDtoMotionSensorDto, root.GatewaySoftwareApi.ListDtoRelayDto, root.GatewaySoftwareApi.ListDtoSpaceDto, root.GatewaySoftwareApi.ListDtoSwitchDto, root.GatewaySoftwareApi.ListDtoTemperatureSensorDto, root.GatewaySoftwareApi.ListDtoZoneDto, root.GatewaySoftwareApi.PolicyDto, root.GatewaySoftwareApi.SpaceDto, root.GatewaySoftwareApi.SpaceTimerDto, root.GatewaySoftwareApi.SpaceTypeDto, root.GatewaySoftwareApi.UpdatePolicyDto, root.GatewaySoftwareApi.UpdateSpaceDto);
  }
}(this, function(ApiClient, AddDeviceToSpaceDto, CreatePolicyDto, CreateSpaceDto, CreateZoneDto, LightingDto, ListDtoActivePolicyValueDto, ListDtoDeviceDto, ListDtoDimmerDto, ListDtoEventDto, ListDtoLightDto, ListDtoLightSensorDto, ListDtoMotionSensorDto, ListDtoRelayDto, ListDtoSpaceDto, ListDtoSwitchDto, ListDtoTemperatureSensorDto, ListDtoZoneDto, PolicyDto, SpaceDto, SpaceTimerDto, SpaceTypeDto, UpdatePolicyDto, UpdateSpaceDto) {
  'use strict';

  /**
   * Spaces service.
   * @module api/SpacesApi
   * @version v1
   */

  /**
   * Constructs a new SpacesApi. 
   * @alias module:api/SpacesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the spacesDelete operation.
     * @callback module:api/SpacesApi~spacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a space from the system
     * @param {Number} id the ID of the space to be deleted
     * @param {module:api/SpacesApi~spacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteDimmer operation.
     * @callback module:api/SpacesApi~spacesDeleteDimmerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a dimmer from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the dimmer to remove
     * @param {module:api/SpacesApi~spacesDeleteDimmerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteDimmer = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteDimmer");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteDimmer");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/dimmers/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteLight operation.
     * @callback module:api/SpacesApi~spacesDeleteLightCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a light from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the light to remove
     * @param {module:api/SpacesApi~spacesDeleteLightCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteLight = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteLight");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteLight");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/lights/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteLightSensor operation.
     * @callback module:api/SpacesApi~spacesDeleteLightSensorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a light sensor from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the light sensor to remove
     * @param {module:api/SpacesApi~spacesDeleteLightSensorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteLightSensor = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteLightSensor");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteLightSensor");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/lightsensors/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteMotionSensor operation.
     * @callback module:api/SpacesApi~spacesDeleteMotionSensorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a motion sensor from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the motion sensor to remove
     * @param {module:api/SpacesApi~spacesDeleteMotionSensorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteMotionSensor = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteMotionSensor");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteMotionSensor");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/motionsensors/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeletePolicy operation.
     * @callback module:api/SpacesApi~spacesDeletePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a policy for a space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesDeletePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeletePolicy = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeletePolicy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteRelay operation.
     * @callback module:api/SpacesApi~spacesDeleteRelayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a relay from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the relay to remove
     * @param {module:api/SpacesApi~spacesDeleteRelayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteRelay = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteRelay");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteRelay");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/relays/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteSwitch operation.
     * @callback module:api/SpacesApi~spacesDeleteSwitchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a switch from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the switch to remove
     * @param {module:api/SpacesApi~spacesDeleteSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteSwitch = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteSwitch");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteSwitch");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/switches/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesDeleteTemperatureSensor operation.
     * @callback module:api/SpacesApi~spacesDeleteTemperatureSensorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a temperature sensor from a space
     * @param {Number} id the ID of the space
     * @param {Number} deviceId the ID of the temperature sensor to remove
     * @param {module:api/SpacesApi~spacesDeleteTemperatureSensorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesDeleteTemperatureSensor = function(id, deviceId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesDeleteTemperatureSensor");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling spacesDeleteTemperatureSensor");
      }


      var pathParams = {
        'id': id,
        'deviceId': deviceId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/temperaturesensors/{deviceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGet operation.
     * @callback module:api/SpacesApi~spacesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoSpaceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of spaces in the system
     * @param {module:api/SpacesApi~spacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoSpaceDto}
     */
    this.spacesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoSpaceDto;

      return this.apiClient.callApi(
        '/spaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetActivePolicy operation.
     * @callback module:api/SpacesApi~spacesGetActivePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoActivePolicyValueDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the active policy values for the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetActivePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoActivePolicyValueDto}
     */
    this.spacesGetActivePolicy = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetActivePolicy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoActivePolicyValueDto;

      return this.apiClient.callApi(
        '/spaces/{id}/activepolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetAllSpaceEvents operation.
     * @callback module:api/SpacesApi~spacesGetAllSpaceEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all events for the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetAllSpaceEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.spacesGetAllSpaceEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetAllSpaceEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/spaces/{id}/events/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetDevices operation.
     * @callback module:api/SpacesApi~spacesGetDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of devices contained in a space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.spacesGetDevices = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/spaces/{id}/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetDimmers operation.
     * @callback module:api/SpacesApi~spacesGetDimmersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDimmerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of dimmers in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetDimmersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDimmerDto}
     */
    this.spacesGetDimmers = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetDimmers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDimmerDto;

      return this.apiClient.callApi(
        '/spaces/{id}/dimmers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetLightSensors operation.
     * @callback module:api/SpacesApi~spacesGetLightSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoLightSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of light sensors in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetLightSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoLightSensorDto}
     */
    this.spacesGetLightSensors = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetLightSensors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoLightSensorDto;

      return this.apiClient.callApi(
        '/spaces/{id}/lightsensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetLights operation.
     * @callback module:api/SpacesApi~spacesGetLightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoLightDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of lights in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetLightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoLightDto}
     */
    this.spacesGetLights = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetLights");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoLightDto;

      return this.apiClient.callApi(
        '/spaces/{id}/lights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetMotionSensors operation.
     * @callback module:api/SpacesApi~spacesGetMotionSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoMotionSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of motion sensors in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetMotionSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoMotionSensorDto}
     */
    this.spacesGetMotionSensors = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetMotionSensors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoMotionSensorDto;

      return this.apiClient.callApi(
        '/spaces/{id}/motionsensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetRelays operation.
     * @callback module:api/SpacesApi~spacesGetRelaysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoRelayDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of relays in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetRelaysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoRelayDto}
     */
    this.spacesGetRelays = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetRelays");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoRelayDto;

      return this.apiClient.callApi(
        '/spaces/{id}/relays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetSpace operation.
     * @callback module:api/SpacesApi~spacesGetSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a space
     * @param {Number} id the ID of the space to be retrieved
     * @param {module:api/SpacesApi~spacesGetSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceDto}
     */
    this.spacesGetSpace = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetSpace");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SpaceDto;

      return this.apiClient.callApi(
        '/spaces/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetSpaceEvents operation.
     * @callback module:api/SpacesApi~spacesGetSpaceEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of recent events for the space.
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetSpaceEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.spacesGetSpaceEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetSpaceEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/spaces/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetSpacePolicy operation.
     * @callback module:api/SpacesApi~spacesGetSpacePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a policy for a space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetSpacePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyDto}
     */
    this.spacesGetSpacePolicy = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetSpacePolicy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = PolicyDto;

      return this.apiClient.callApi(
        '/spaces/{id}/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetSwitches operation.
     * @callback module:api/SpacesApi~spacesGetSwitchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoSwitchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of switches in the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetSwitchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoSwitchDto}
     */
    this.spacesGetSwitches = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetSwitches");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoSwitchDto;

      return this.apiClient.callApi(
        '/spaces/{id}/switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetTemperatureSensors operation.
     * @callback module:api/SpacesApi~spacesGetTemperatureSensorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoTemperatureSensorDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of temperature sensors contained in a space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetTemperatureSensorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoTemperatureSensorDto}
     */
    this.spacesGetTemperatureSensors = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetTemperatureSensors");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoTemperatureSensorDto;

      return this.apiClient.callApi(
        '/spaces/{id}/temperaturesensors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetTimer operation.
     * @callback module:api/SpacesApi~spacesGetTimerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTimerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the vacancy timer for the space if one exists
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetTimerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTimerDto}
     */
    this.spacesGetTimer = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetTimer");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SpaceTimerDto;

      return this.apiClient.callApi(
        '/spaces/{id}/timer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetType operation.
     * @callback module:api/SpacesApi~spacesGetTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTypeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the type of the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTypeDto}
     */
    this.spacesGetType = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetType");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SpaceTypeDto;

      return this.apiClient.callApi(
        '/spaces/{id}/spacetype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesGetZones operation.
     * @callback module:api/SpacesApi~spacesGetZonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoZoneDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of zones contained in a space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesGetZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoZoneDto}
     */
    this.spacesGetZones = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesGetZones");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoZoneDto;

      return this.apiClient.callApi(
        '/spaces/{id}/zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesLighting operation.
     * @callback module:api/SpacesApi~spacesLightingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the level of the lights in a space
     * @param {Number} id the ID of the space
     * @param {module:model/LightingDto} lighting the lighting values to use for the space
     * @param {module:api/SpacesApi~spacesLightingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesLighting = function(id, lighting, callback) {
      var postBody = lighting;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesLighting");
      }

      // verify the required parameter 'lighting' is set
      if (lighting === undefined || lighting === null) {
        throw new Error("Missing the required parameter 'lighting' when calling spacesLighting");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/lighting', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPost operation.
     * @callback module:api/SpacesApi~spacesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a space
     * @param {module:model/CreateSpaceDto} space the space to be created
     * @param {module:api/SpacesApi~spacesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPost = function(space, callback) {
      var postBody = space;

      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling spacesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPostClearZoneConfig operation.
     * @callback module:api/SpacesApi~spacesPostClearZoneConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exits the zone configuration mode for the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesPostClearZoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPostClearZoneConfig = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPostClearZoneConfig");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/zones/config/exit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPostPolicy operation.
     * @callback module:api/SpacesApi~spacesPostPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a policy for a space
     * @param {Number} id the ID of the space
     * @param {module:model/CreatePolicyDto} policy the policy to be created for the space
     * @param {module:api/SpacesApi~spacesPostPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPostPolicy = function(id, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPostPolicy");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling spacesPostPolicy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/policy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPostSaveZoneConfig operation.
     * @callback module:api/SpacesApi~spacesPostSaveZoneConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves the zone configuration
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesPostSaveZoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPostSaveZoneConfig = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPostSaveZoneConfig");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/zones/config/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPostSetZoneConfig operation.
     * @callback module:api/SpacesApi~spacesPostSetZoneConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enters the zone configuration mode for the space
     * @param {Number} id the ID of the space
     * @param {module:api/SpacesApi~spacesPostSetZoneConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPostSetZoneConfig = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPostSetZoneConfig");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/zones/config/enter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPostZone operation.
     * @callback module:api/SpacesApi~spacesPostZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new zone within a space
     * @param {Number} id the ID of the space
     * @param {module:model/CreateZoneDto} zone the zone to be created
     * @param {module:api/SpacesApi~spacesPostZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPostZone = function(id, zone, callback) {
      var postBody = zone;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPostZone");
      }

      // verify the required parameter 'zone' is set
      if (zone === undefined || zone === null) {
        throw new Error("Missing the required parameter 'zone' when calling spacesPostZone");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/zones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPut operation.
     * @callback module:api/SpacesApi~spacesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a space
     * @param {Number} id the ID of the space to be updated
     * @param {module:model/UpdateSpaceDto} space the updated values for the space
     * @param {module:api/SpacesApi~spacesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPut = function(id, space, callback) {
      var postBody = space;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPut");
      }

      // verify the required parameter 'space' is set
      if (space === undefined || space === null) {
        throw new Error("Missing the required parameter 'space' when calling spacesPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPutDevices operation.
     * @callback module:api/SpacesApi~spacesPutDevicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a device to a space
     * @param {Number} id the ID of the space
     * @param {module:model/AddDeviceToSpaceDto} device the device to be added to the space and a value indicting which attached devices to include
     * @param {module:api/SpacesApi~spacesPutDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPutDevices = function(id, device, callback) {
      var postBody = device;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPutDevices");
      }

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling spacesPutDevices");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/devices', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPutPolicy operation.
     * @callback module:api/SpacesApi~spacesPutPolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a policy for a space
     * @param {Number} id the ID of the space
     * @param {module:model/UpdatePolicyDto} policy the policy to be updated
     * @param {module:api/SpacesApi~spacesPutPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPutPolicy = function(id, policy, callback) {
      var postBody = policy;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPutPolicy");
      }

      // verify the required parameter 'policy' is set
      if (policy === undefined || policy === null) {
        throw new Error("Missing the required parameter 'policy' when calling spacesPutPolicy");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesPutType operation.
     * @callback module:api/SpacesApi~spacesPutTypeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the type of the space
     * @param {Number} id the ID of the space
     * @param {module:model/SpaceTypeDto} spaceType the space type to be set
     * @param {module:api/SpacesApi~spacesPutTypeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesPutType = function(id, spaceType, callback) {
      var postBody = spaceType;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesPutType");
      }

      // verify the required parameter 'spaceType' is set
      if (spaceType === undefined || spaceType === null) {
        throw new Error("Missing the required parameter 'spaceType' when calling spacesPutType");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/spacetype', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesSynchronize operation.
     * @callback module:api/SpacesApi~spacesSynchronizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Synchronizes the state of all lights with the state of their space
     * @param {module:api/SpacesApi~spacesSynchronizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesSynchronize = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/synchronize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesTurnOff operation.
     * @callback module:api/SpacesApi~spacesTurnOffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns off all lights in a space
     * @param {Number} id the ID of the space to be turned off
     * @param {module:api/SpacesApi~spacesTurnOffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesTurnOff = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesTurnOff");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/turnoff', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the spacesTurnOn operation.
     * @callback module:api/SpacesApi~spacesTurnOnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Turns on all lights in a space
     * @param {Number} id the ID of the space to be turned on
     * @param {module:api/SpacesApi~spacesTurnOnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.spacesTurnOn = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling spacesTurnOn");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/spaces/{id}/turnon', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
