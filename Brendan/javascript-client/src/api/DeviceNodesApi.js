/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateDeviceNodeDto', 'model/DeviceNodeDto', 'model/ListDtoDeviceNodeDto', 'model/NodeDto', 'model/UpdateDeviceNodeDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateDeviceNodeDto'), require('../model/DeviceNodeDto'), require('../model/ListDtoDeviceNodeDto'), require('../model/NodeDto'), require('../model/UpdateDeviceNodeDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.DeviceNodesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateDeviceNodeDto, root.GatewaySoftwareApi.DeviceNodeDto, root.GatewaySoftwareApi.ListDtoDeviceNodeDto, root.GatewaySoftwareApi.NodeDto, root.GatewaySoftwareApi.UpdateDeviceNodeDto);
  }
}(this, function(ApiClient, CreateDeviceNodeDto, DeviceNodeDto, ListDtoDeviceNodeDto, NodeDto, UpdateDeviceNodeDto) {
  'use strict';

  /**
   * DeviceNodes service.
   * @module api/DeviceNodesApi
   * @version v1
   */

  /**
   * Constructs a new DeviceNodesApi. 
   * @alias module:api/DeviceNodesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deviceNodesDelete operation.
     * @callback module:api/DeviceNodesApi~deviceNodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a device node from the system
     * @param {Number} id the ID of the device node to be deleted
     * @param {module:api/DeviceNodesApi~deviceNodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceNodesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceNodesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devicenodes/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesDeleteAll operation.
     * @callback module:api/DeviceNodesApi~deviceNodesDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WARNING: Deletes all device nodes from the system.
     * @param {module:api/DeviceNodesApi~deviceNodesDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceNodesDeleteAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devicenodes/deleteall', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesDiscover operation.
     * @callback module:api/DeviceNodesApi~deviceNodesDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all device nodes in the system
     * @param {module:api/DeviceNodesApi~deviceNodesDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceNodesDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devicenodes/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesGet operation.
     * @callback module:api/DeviceNodesApi~deviceNodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceNodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all device nodes in the system
     * @param {module:api/DeviceNodesApi~deviceNodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceNodeDto}
     */
    this.deviceNodesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceNodeDto;

      return this.apiClient.callApi(
        '/devicenodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesGetDeviceNode operation.
     * @callback module:api/DeviceNodesApi~deviceNodesGetDeviceNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceNodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a device node
     * @param {Number} id the ID of the device node to be retrieved
     * @param {module:api/DeviceNodesApi~deviceNodesGetDeviceNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceNodeDto}
     */
    this.deviceNodesGetDeviceNode = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceNodesGetDeviceNode");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = DeviceNodeDto;

      return this.apiClient.callApi(
        '/devicenodes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesGetNode operation.
     * @callback module:api/DeviceNodesApi~deviceNodesGetNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the network node associated with the device node
     * @param {Number} id the ID of the device node
     * @param {module:api/DeviceNodesApi~deviceNodesGetNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeDto}
     */
    this.deviceNodesGetNode = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceNodesGetNode");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = NodeDto;

      return this.apiClient.callApi(
        '/devicenodes/{id}/networknode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesPost operation.
     * @callback module:api/DeviceNodesApi~deviceNodesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a device node
     * @param {module:model/CreateDeviceNodeDto} deviceNode the device node to be created
     * @param {module:api/DeviceNodesApi~deviceNodesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceNodesPost = function(deviceNode, callback) {
      var postBody = deviceNode;

      // verify the required parameter 'deviceNode' is set
      if (deviceNode === undefined || deviceNode === null) {
        throw new Error("Missing the required parameter 'deviceNode' when calling deviceNodesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/devicenodes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceNodesPut operation.
     * @callback module:api/DeviceNodesApi~deviceNodesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a device node
     * @param {Number} id the ID of the device node to be updated
     * @param {module:model/UpdateDeviceNodeDto} deviceNode the updated values for the device node
     * @param {module:api/DeviceNodesApi~deviceNodesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceNodesPut = function(id, deviceNode, callback) {
      var postBody = deviceNode;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceNodesPut");
      }

      // verify the required parameter 'deviceNode' is set
      if (deviceNode === undefined || deviceNode === null) {
        throw new Error("Missing the required parameter 'deviceNode' when calling deviceNodesPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devicenodes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
