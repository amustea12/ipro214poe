/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateRelayDto', 'model/ListDtoEventDto', 'model/ListDtoRelayDto', 'model/RelayDto', 'model/UpdateRelayDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateRelayDto'), require('../model/ListDtoEventDto'), require('../model/ListDtoRelayDto'), require('../model/RelayDto'), require('../model/UpdateRelayDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.RelaysApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateRelayDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.ListDtoRelayDto, root.GatewaySoftwareApi.RelayDto, root.GatewaySoftwareApi.UpdateRelayDto);
  }
}(this, function(ApiClient, CreateRelayDto, ListDtoEventDto, ListDtoRelayDto, RelayDto, UpdateRelayDto) {
  'use strict';

  /**
   * Relays service.
   * @module api/RelaysApi
   * @version v1
   */

  /**
   * Constructs a new RelaysApi. 
   * @alias module:api/RelaysApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the relaysCloseRelay operation.
     * @callback module:api/RelaysApi~relaysCloseRelayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Closes the relay
     * @param {Number} id the ID of the relay to be closed
     * @param {module:api/RelaysApi~relaysCloseRelayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysCloseRelay = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysCloseRelay");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays/{id}/close', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysDelete operation.
     * @callback module:api/RelaysApi~relaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a relay from the system
     * @param {Number} id the ID of the relay to be deleted
     * @param {module:api/RelaysApi~relaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysDiscover operation.
     * @callback module:api/RelaysApi~relaysDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all relays in the system
     * @param {module:api/RelaysApi~relaysDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysGet operation.
     * @callback module:api/RelaysApi~relaysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoRelayDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all relays in the system
     * @param {module:api/RelaysApi~relaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoRelayDto}
     */
    this.relaysGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoRelayDto;

      return this.apiClient.callApi(
        '/relays', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysGetEvents operation.
     * @callback module:api/RelaysApi~relaysGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of relay events
     * @param {Number} id the ID of the relay
     * @param {module:api/RelaysApi~relaysGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.relaysGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/relays/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysGetRelay operation.
     * @callback module:api/RelaysApi~relaysGetRelayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RelayDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a relay
     * @param {Number} id the ID of the relay to be retrieved
     * @param {module:api/RelaysApi~relaysGetRelayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelayDto}
     */
    this.relaysGetRelay = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysGetRelay");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = RelayDto;

      return this.apiClient.callApi(
        '/relays/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysOpenRelay operation.
     * @callback module:api/RelaysApi~relaysOpenRelayCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Opens the relay
     * @param {Number} id the ID of the relay to be opened
     * @param {module:api/RelaysApi~relaysOpenRelayCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysOpenRelay = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysOpenRelay");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays/{id}/open', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysPost operation.
     * @callback module:api/RelaysApi~relaysPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a relay
     * @param {module:model/CreateRelayDto} relay the relay to be created
     * @param {module:api/RelaysApi~relaysPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysPost = function(relay, callback) {
      var postBody = relay;

      // verify the required parameter 'relay' is set
      if (relay === undefined || relay === null) {
        throw new Error("Missing the required parameter 'relay' when calling relaysPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the relaysPut operation.
     * @callback module:api/RelaysApi~relaysPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a relay
     * @param {Number} id the ID of the relay to be updated
     * @param {module:model/UpdateRelayDto} relay a relay containing the new values
     * @param {module:api/RelaysApi~relaysPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.relaysPut = function(id, relay, callback) {
      var postBody = relay;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling relaysPut");
      }

      // verify the required parameter 'relay' is set
      if (relay === undefined || relay === null) {
        throw new Error("Missing the required parameter 'relay' when calling relaysPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/relays/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
