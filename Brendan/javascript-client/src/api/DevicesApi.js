/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ListDtoDeviceDto', 'model/NodeDto', 'model/PaginatedListDevicesSearchResultDto', 'model/SpaceDto', 'model/UpdateDeviceDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ListDtoDeviceDto'), require('../model/NodeDto'), require('../model/PaginatedListDevicesSearchResultDto'), require('../model/SpaceDto'), require('../model/UpdateDeviceDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.DevicesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.ListDtoDeviceDto, root.GatewaySoftwareApi.NodeDto, root.GatewaySoftwareApi.PaginatedListDevicesSearchResultDto, root.GatewaySoftwareApi.SpaceDto, root.GatewaySoftwareApi.UpdateDeviceDto);
  }
}(this, function(ApiClient, ListDtoDeviceDto, NodeDto, PaginatedListDevicesSearchResultDto, SpaceDto, UpdateDeviceDto) {
  'use strict';

  /**
   * Devices service.
   * @module api/DevicesApi
   * @version v1
   */

  /**
   * Constructs a new DevicesApi. 
   * @alias module:api/DevicesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the devicesAll operation.
     * @callback module:api/DevicesApi~devicesAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all devices in the system
     * @param {module:api/DevicesApi~devicesAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.devicesAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/devices/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesDeleteAll operation.
     * @callback module:api/DevicesApi~devicesDeleteAllCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WARNING: Deletes all devices in the system
     * @param {module:api/DevicesApi~devicesDeleteAllCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.devicesDeleteAll = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/deleteall', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesDiscover operation.
     * @callback module:api/DevicesApi~devicesDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all devices on the network
     * @param {module:api/DevicesApi~devicesDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.devicesDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetNode operation.
     * @callback module:api/DevicesApi~devicesGetNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the network node associated with the device
     * @param {module:model/String} type the type of the device
     * @param {Number} id the ID of the device
     * @param {module:api/DevicesApi~devicesGetNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeDto}
     */
    this.devicesGetNode = function(type, id, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling devicesGetNode");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesGetNode");
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = NodeDto;

      return this.apiClient.callApi(
        '/devices/{type}/{id}/networknode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetSpace operation.
     * @callback module:api/DevicesApi~devicesGetSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the space that contains the device
     * @param {module:model/String} type the type of device
     * @param {Number} id the ID of the device
     * @param {module:api/DevicesApi~devicesGetSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceDto}
     */
    this.devicesGetSpace = function(type, id, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling devicesGetSpace");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesGetSpace");
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SpaceDto;

      return this.apiClient.callApi(
        '/devices/{type}/{id}/space', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesPut operation.
     * @callback module:api/DevicesApi~devicesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Renames a device
     * @param {module:model/String} type the type of the device to be renamed
     * @param {Number} id the ID of the device to be renamed
     * @param {module:model/UpdateDeviceDto} device the device containing the new name
     * @param {module:api/DevicesApi~devicesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.devicesPut = function(type, id, device, callback) {
      var postBody = device;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling devicesPut");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling devicesPut");
      }

      // verify the required parameter 'device' is set
      if (device === undefined || device === null) {
        throw new Error("Missing the required parameter 'device' when calling devicesPut");
      }


      var pathParams = {
        'type': type,
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/devices/{type}/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesSearch operation.
     * @callback module:api/DevicesApi~devicesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedListDevicesSearchResultDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches all devices in the system
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page the results page
     * @param {Number} opts.pageSize the results page size
     * @param {String} opts.term the search term
     * @param {String} opts.types the devices types
     * @param {Boolean} opts.isOnline the device status
     * @param {String} opts.spaceIds the space IDs to include
     * @param {String} opts.networkSwitchNames the network switch names to include
     * @param {String} opts.networkSwitchIpAddresses the network switch IP addresses
     * @param {Boolean} opts.onlyDevicesWithLldp only include devices with LLDP
     * @param {String} opts.sortDir the sort direction
     * @param {String} opts.sortBy the sort order
     * @param {Date} opts.minDiscoveredDate the minimum discovered date
     * @param {Date} opts.maxDiscoveredDate the maximum discovered date
     * @param {module:api/DevicesApi~devicesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedListDevicesSearchResultDto}
     */
    this.devicesSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'term': opts['term'],
        'types': opts['types'],
        'isOnline': opts['isOnline'],
        'spaceIds': opts['spaceIds'],
        'networkSwitchNames': opts['networkSwitchNames'],
        'networkSwitchIpAddresses': opts['networkSwitchIpAddresses'],
        'onlyDevicesWithLldp': opts['onlyDevicesWithLldp'],
        'sortDir': opts['sortDir'],
        'sortBy': opts['sortBy'],
        'minDiscoveredDate': opts['minDiscoveredDate'],
        'maxDiscoveredDate': opts['maxDiscoveredDate']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = PaginatedListDevicesSearchResultDto;

      return this.apiClient.callApi(
        '/devices/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUnassigned operation.
     * @callback module:api/DevicesApi~devicesUnassignedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoDeviceDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all devices that are not assigned to a space
     * @param {module:api/DevicesApi~devicesUnassignedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoDeviceDto}
     */
    this.devicesUnassigned = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoDeviceDto;

      return this.apiClient.callApi(
        '/devices/unassigned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
