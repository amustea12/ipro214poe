/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CreateSwitchDto', 'model/CreateSwitchEventDto', 'model/ListDtoEventDto', 'model/ListDtoSwitchDto', 'model/SwitchDto', 'model/UpdateSwitchDto'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CreateSwitchDto'), require('../model/CreateSwitchEventDto'), require('../model/ListDtoEventDto'), require('../model/ListDtoSwitchDto'), require('../model/SwitchDto'), require('../model/UpdateSwitchDto'));
  } else {
    // Browser globals (root is window)
    if (!root.GatewaySoftwareApi) {
      root.GatewaySoftwareApi = {};
    }
    root.GatewaySoftwareApi.SwitchesApi = factory(root.GatewaySoftwareApi.ApiClient, root.GatewaySoftwareApi.CreateSwitchDto, root.GatewaySoftwareApi.CreateSwitchEventDto, root.GatewaySoftwareApi.ListDtoEventDto, root.GatewaySoftwareApi.ListDtoSwitchDto, root.GatewaySoftwareApi.SwitchDto, root.GatewaySoftwareApi.UpdateSwitchDto);
  }
}(this, function(ApiClient, CreateSwitchDto, CreateSwitchEventDto, ListDtoEventDto, ListDtoSwitchDto, SwitchDto, UpdateSwitchDto) {
  'use strict';

  /**
   * Switches service.
   * @module api/SwitchesApi
   * @version v1
   */

  /**
   * Constructs a new SwitchesApi. 
   * @alias module:api/SwitchesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the switchesDelete operation.
     * @callback module:api/SwitchesApi~switchesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a switch from the system
     * @param {Number} id the ID of the switch to be deleted
     * @param {module:api/SwitchesApi~switchesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.switchesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/switches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesDiscover operation.
     * @callback module:api/SwitchesApi~switchesDiscoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Discovers all switches in the system
     * @param {module:api/SwitchesApi~switchesDiscoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.switchesDiscover = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/switches/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesEventPost operation.
     * @callback module:api/SwitchesApi~switchesEventPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a switch event
     * @param {Number} id the ID of the switch
     * @param {module:model/CreateSwitchEventDto} event the event to be created
     * @param {module:api/SwitchesApi~switchesEventPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.switchesEventPost = function(id, event, callback) {
      var postBody = event;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchesEventPost");
      }

      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling switchesEventPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/switches/{id}/events', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesGet operation.
     * @callback module:api/SwitchesApi~switchesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoSwitchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all switches in the system
     * @param {module:api/SwitchesApi~switchesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoSwitchDto}
     */
    this.switchesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoSwitchDto;

      return this.apiClient.callApi(
        '/switches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesGetEvents operation.
     * @callback module:api/SwitchesApi~switchesGetEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDtoEventDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of switch events
     * @param {Number} id the ID of the switch
     * @param {module:api/SwitchesApi~switchesGetEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDtoEventDto}
     */
    this.switchesGetEvents = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchesGetEvents");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = ListDtoEventDto;

      return this.apiClient.callApi(
        '/switches/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesGetSwitch operation.
     * @callback module:api/SwitchesApi~switchesGetSwitchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwitchDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a switch
     * @param {Number} id the ID of the switch to be retrieved
     * @param {module:api/SwitchesApi~switchesGetSwitchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwitchDto}
     */
    this.switchesGetSwitch = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchesGetSwitch");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = SwitchDto;

      return this.apiClient.callApi(
        '/switches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesPost operation.
     * @callback module:api/SwitchesApi~switchesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a switch
     * @param {module:model/CreateSwitchDto} _switch the switch to be created
     * @param {module:api/SwitchesApi~switchesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.switchesPost = function(_switch, callback) {
      var postBody = _switch;

      // verify the required parameter '_switch' is set
      if (_switch === undefined || _switch === null) {
        throw new Error("Missing the required parameter '_switch' when calling switchesPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/switches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the switchesPut operation.
     * @callback module:api/SwitchesApi~switchesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a switch
     * @param {Number} id the ID of the switch to be updated
     * @param {module:model/UpdateSwitchDto} _switch a switch containing the new values
     * @param {module:api/SwitchesApi~switchesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.switchesPut = function(id, _switch, callback) {
      var postBody = _switch;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling switchesPut");
      }

      // verify the required parameter '_switch' is set
      if (_switch === undefined || _switch === null) {
        throw new Error("Missing the required parameter '_switch' when calling switchesPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/switches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
