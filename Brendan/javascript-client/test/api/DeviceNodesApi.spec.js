/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GatewaySoftwareApi);
  }
}(this, function(expect, GatewaySoftwareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GatewaySoftwareApi.DeviceNodesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeviceNodesApi', function() {
    describe('deviceNodesDelete', function() {
      it('should call deviceNodesDelete successfully', function(done) {
        //uncomment below and update the code to test deviceNodesDelete
        //instance.deviceNodesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesDeleteAll', function() {
      it('should call deviceNodesDeleteAll successfully', function(done) {
        //uncomment below and update the code to test deviceNodesDeleteAll
        //instance.deviceNodesDeleteAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesDiscover', function() {
      it('should call deviceNodesDiscover successfully', function(done) {
        //uncomment below and update the code to test deviceNodesDiscover
        //instance.deviceNodesDiscover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesGet', function() {
      it('should call deviceNodesGet successfully', function(done) {
        //uncomment below and update the code to test deviceNodesGet
        //instance.deviceNodesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesGetDeviceNode', function() {
      it('should call deviceNodesGetDeviceNode successfully', function(done) {
        //uncomment below and update the code to test deviceNodesGetDeviceNode
        //instance.deviceNodesGetDeviceNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesGetNode', function() {
      it('should call deviceNodesGetNode successfully', function(done) {
        //uncomment below and update the code to test deviceNodesGetNode
        //instance.deviceNodesGetNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesPost', function() {
      it('should call deviceNodesPost successfully', function(done) {
        //uncomment below and update the code to test deviceNodesPost
        //instance.deviceNodesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deviceNodesPut', function() {
      it('should call deviceNodesPut successfully', function(done) {
        //uncomment below and update the code to test deviceNodesPut
        //instance.deviceNodesPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
