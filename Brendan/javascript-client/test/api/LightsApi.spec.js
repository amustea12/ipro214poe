/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GatewaySoftwareApi);
  }
}(this, function(expect, GatewaySoftwareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GatewaySoftwareApi.LightsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LightsApi', function() {
    describe('lightsBatchLighting', function() {
      it('should call lightsBatchLighting successfully', function(done) {
        //uncomment below and update the code to test lightsBatchLighting
        //instance.lightsBatchLighting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsDelete', function() {
      it('should call lightsDelete successfully', function(done) {
        //uncomment below and update the code to test lightsDelete
        //instance.lightsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsDeleteEmergencySettings', function() {
      it('should call lightsDeleteEmergencySettings successfully', function(done) {
        //uncomment below and update the code to test lightsDeleteEmergencySettings
        //instance.lightsDeleteEmergencySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsDiscover', function() {
      it('should call lightsDiscover successfully', function(done) {
        //uncomment below and update the code to test lightsDiscover
        //instance.lightsDiscover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsGet', function() {
      it('should call lightsGet successfully', function(done) {
        //uncomment below and update the code to test lightsGet
        //instance.lightsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsGetEvents', function() {
      it('should call lightsGetEvents successfully', function(done) {
        //uncomment below and update the code to test lightsGetEvents
        //instance.lightsGetEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsGetLight', function() {
      it('should call lightsGetLight successfully', function(done) {
        //uncomment below and update the code to test lightsGetLight
        //instance.lightsGetLight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsLighting', function() {
      it('should call lightsLighting successfully', function(done) {
        //uncomment below and update the code to test lightsLighting
        //instance.lightsLighting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsPost', function() {
      it('should call lightsPost successfully', function(done) {
        //uncomment below and update the code to test lightsPost
        //instance.lightsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsPostEmergencySettings', function() {
      it('should call lightsPostEmergencySettings successfully', function(done) {
        //uncomment below and update the code to test lightsPostEmergencySettings
        //instance.lightsPostEmergencySettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsPut', function() {
      it('should call lightsPut successfully', function(done) {
        //uncomment below and update the code to test lightsPut
        //instance.lightsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsTurnOff', function() {
      it('should call lightsTurnOff successfully', function(done) {
        //uncomment below and update the code to test lightsTurnOff
        //instance.lightsTurnOff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lightsTurnOn', function() {
      it('should call lightsTurnOn successfully', function(done) {
        //uncomment below and update the code to test lightsTurnOn
        //instance.lightsTurnOn(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
