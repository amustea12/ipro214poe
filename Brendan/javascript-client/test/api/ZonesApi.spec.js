/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GatewaySoftwareApi);
  }
}(this, function(expect, GatewaySoftwareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GatewaySoftwareApi.ZonesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ZonesApi', function() {
    describe('zonesDelete', function() {
      it('should call zonesDelete successfully', function(done) {
        //uncomment below and update the code to test zonesDelete
        //instance.zonesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesDeleteLight', function() {
      it('should call zonesDeleteLight successfully', function(done) {
        //uncomment below and update the code to test zonesDeleteLight
        //instance.zonesDeleteLight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesDeleteLightSensor', function() {
      it('should call zonesDeleteLightSensor successfully', function(done) {
        //uncomment below and update the code to test zonesDeleteLightSensor
        //instance.zonesDeleteLightSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetAssignableDevices', function() {
      it('should call zonesGetAssignableDevices successfully', function(done) {
        //uncomment below and update the code to test zonesGetAssignableDevices
        //instance.zonesGetAssignableDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetDevices', function() {
      it('should call zonesGetDevices successfully', function(done) {
        //uncomment below and update the code to test zonesGetDevices
        //instance.zonesGetDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetEvents', function() {
      it('should call zonesGetEvents successfully', function(done) {
        //uncomment below and update the code to test zonesGetEvents
        //instance.zonesGetEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetLightSensor', function() {
      it('should call zonesGetLightSensor successfully', function(done) {
        //uncomment below and update the code to test zonesGetLightSensor
        //instance.zonesGetLightSensor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetSpace', function() {
      it('should call zonesGetSpace successfully', function(done) {
        //uncomment below and update the code to test zonesGetSpace
        //instance.zonesGetSpace(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesGetZone', function() {
      it('should call zonesGetZone successfully', function(done) {
        //uncomment below and update the code to test zonesGetZone
        //instance.zonesGetZone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesPut', function() {
      it('should call zonesPut successfully', function(done) {
        //uncomment below and update the code to test zonesPut
        //instance.zonesPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('zonesPutDevices', function() {
      it('should call zonesPutDevices successfully', function(done) {
        //uncomment below and update the code to test zonesPutDevices
        //instance.zonesPutDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
