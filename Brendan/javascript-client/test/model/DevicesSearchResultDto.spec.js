/**
 * Gateway Software API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GatewaySoftwareApi);
  }
}(this, function(expect, GatewaySoftwareApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GatewaySoftwareApi.DevicesSearchResultDto();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DevicesSearchResultDto', function() {
    it('should create an instance of DevicesSearchResultDto', function() {
      // uncomment below and update the code to test DevicesSearchResultDto
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be.a(GatewaySoftwareApi.DevicesSearchResultDto);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property protocol (base name: "protocol")', function() {
      // uncomment below and update the code to test the property protocol
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property externalId (base name: "externalId")', function() {
      // uncomment below and update the code to test the property externalId
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property discoveredDate (base name: "discoveredDate")', function() {
      // uncomment below and update the code to test the property discoveredDate
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property isOnline (base name: "isOnline")', function() {
      // uncomment below and update the code to test the property isOnline
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property nodeId (base name: "nodeId")', function() {
      // uncomment below and update the code to test the property nodeId
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property spaceId (base name: "spaceId")', function() {
      // uncomment below and update the code to test the property spaceId
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property spaceName (base name: "spaceName")', function() {
      // uncomment below and update the code to test the property spaceName
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property networkSwitchName (base name: "networkSwitchName")', function() {
      // uncomment below and update the code to test the property networkSwitchName
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property networkSwitchIpAddress (base name: "networkSwitchIpAddress")', function() {
      // uncomment below and update the code to test the property networkSwitchIpAddress
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property networkSwitchPortId (base name: "networkSwitchPortId")', function() {
      // uncomment below and update the code to test the property networkSwitchPortId
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property networkSwitchPortDescription (base name: "networkSwitchPortDescription")', function() {
      // uncomment below and update the code to test the property networkSwitchPortDescription
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property isEmergency (base name: "isEmergency")', function() {
      // uncomment below and update the code to test the property isEmergency
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property isLight (base name: "isLight")', function() {
      // uncomment below and update the code to test the property isLight
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property isRelay (base name: "isRelay")', function() {
      // uncomment below and update the code to test the property isRelay
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property lightType (base name: "lightType")', function() {
      // uncomment below and update the code to test the property lightType
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

    it('should have the property relayType (base name: "relayType")', function() {
      // uncomment below and update the code to test the property relayType
      //var instane = new GatewaySoftwareApi.DevicesSearchResultDto();
      //expect(instance).to.be();
    });

  });

}));
