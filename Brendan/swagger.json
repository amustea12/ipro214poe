{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Gateway Software API"
  },
  "host": "192.168.10.2",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/actionsets/{actionSetId}/actions": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Gets a list of actions contained within an action set",
        "operationId": "Actions_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ActionDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Creates an action",
        "operationId": "Actions_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "action",
            "in": "body",
            "description": "the action to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{actionSetId}/actions/{actionId}": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Gets an action",
        "operationId": "Actions_GetAction",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "the ID of the action to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActionDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Actions"
        ],
        "summary": "Updates an action",
        "operationId": "Actions_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "the ID of the action to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "action",
            "in": "body",
            "description": "the updated values for the action",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateActionDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Actions"
        ],
        "summary": "Deletes an action from the system",
        "operationId": "Actions_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "the ID of the action to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{actionSetId}/actions/{actionId}/execute": {
      "post": {
        "tags": [
          "Actions"
        ],
        "summary": "Executes an action",
        "operationId": "Actions_Execute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "the ID of the action to be executed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{actionSetId}/actions/{actionId}/events": {
      "get": {
        "tags": [
          "Actions"
        ],
        "summary": "Gets a list of action events",
        "operationId": "Actions_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "actionSetId",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionId",
            "in": "path",
            "description": "the ID of the action",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets": {
      "get": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Gets a list of action sets in the system",
        "operationId": "ActionSets_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ActionSetDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Creates an action set",
        "operationId": "ActionSets_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "actionSet",
            "in": "body",
            "description": "the action set to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateActionSetDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{id}": {
      "get": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Gets an action set",
        "operationId": "ActionSets_GetActionSet",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the action set to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActionSetDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Updates an action set",
        "operationId": "ActionSets_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the action set to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionSet",
            "in": "body",
            "description": "the updated values for the action set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateActionSetDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Deletes an action set from the system",
        "operationId": "ActionSets_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the action set to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{id}/execute": {
      "post": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Executes an action set",
        "operationId": "ActionSets_Execute",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the action set to be executed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/actionsets/{id}/events": {
      "get": {
        "tags": [
          "ActionSets"
        ],
        "summary": "Gets a list of action set events",
        "operationId": "ActionSets_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the action set",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applicationkeys": {
      "get": {
        "tags": [
          "ApplicationKeys"
        ],
        "summary": "Gets a list of all application keys in the system",
        "operationId": "ApplicationKeys_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ApplicationKeyDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "ApplicationKeys"
        ],
        "summary": "Creates an application key",
        "operationId": "ApplicationKeys_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "applicationKey",
            "in": "body",
            "description": "the application key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApplicationKeyDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applicationkeys/{id}": {
      "get": {
        "tags": [
          "ApplicationKeys"
        ],
        "summary": "Gets an application key",
        "operationId": "ApplicationKeys_GetApplicationKey",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the application key to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ApplicationKeyDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "ApplicationKeys"
        ],
        "summary": "Updates an application key",
        "operationId": "ApplicationKeys_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the application key to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "applicationKey",
            "in": "body",
            "description": "the updated values for the aplication key",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateApplicationKeyDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "ApplicationKeys"
        ],
        "summary": "Deletes an application key from the system",
        "operationId": "ApplicationKeys_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the application key to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dashboards/devicestatusbydevicetype": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Gets device status by device type.",
        "operationId": "Dashboards_GetDeviceStatusByDeviceType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "spaceIds",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DashboardDeviceStatusByDeviceTypeDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dashboards/devicestatusbynetworkswitch": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Gets device status by network switch.",
        "operationId": "Dashboards_GetDeviceStatusByNetworkSwitch",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DashboardDeviceStatusByNetworkSwitchDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dashboards/devicestatusbyspace": {
      "get": {
        "tags": [
          "Dashboards"
        ],
        "summary": "Gets device status by space.",
        "operationId": "Dashboards_GetDeviceStatusBySpace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DashboardDeviceStatusBySpaceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devicenodes": {
      "get": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Gets a list of all device nodes in the system",
        "operationId": "DeviceNodes_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceNodeDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Creates a device node",
        "operationId": "DeviceNodes_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "deviceNode",
            "in": "body",
            "description": "the device node to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDeviceNodeDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devicenodes/{id}": {
      "get": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Gets a device node",
        "operationId": "DeviceNodes_GetDeviceNode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device node to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DeviceNodeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Updates a device node",
        "operationId": "DeviceNodes_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device node to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceNode",
            "in": "body",
            "description": "the updated values for the device node",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeviceNodeDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Deletes a device node from the system",
        "operationId": "DeviceNodes_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device node to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devicenodes/discover": {
      "post": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Discovers all device nodes in the system",
        "operationId": "DeviceNodes_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devicenodes/deleteall": {
      "delete": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "WARNING: Deletes all device nodes from the system.",
        "operationId": "DeviceNodes_DeleteAll",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devicenodes/{id}/networknode": {
      "get": {
        "tags": [
          "DeviceNodes"
        ],
        "summary": "Gets the network node associated with the device node",
        "operationId": "DeviceNodes_GetNode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device node",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/all": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a list of all devices in the system",
        "operationId": "Devices_All",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/search": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Searches all devices in the system",
        "operationId": "Devices_Search",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "the results page",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the results page size",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "term",
            "in": "query",
            "description": "the search term",
            "required": false,
            "type": "string"
          },
          {
            "name": "types",
            "in": "query",
            "description": "the devices types",
            "required": false,
            "type": "string"
          },
          {
            "name": "isOnline",
            "in": "query",
            "description": "the device status",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "spaceIds",
            "in": "query",
            "description": "the space IDs to include",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkSwitchNames",
            "in": "query",
            "description": "the network switch names to include",
            "required": false,
            "type": "string"
          },
          {
            "name": "networkSwitchIpAddresses",
            "in": "query",
            "description": "the network switch IP addresses",
            "required": false,
            "type": "string"
          },
          {
            "name": "onlyDevicesWithLldp",
            "in": "query",
            "description": "only include devices with LLDP",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "the sort direction",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "the sort order",
            "required": false,
            "type": "string"
          },
          {
            "name": "minDiscoveredDate",
            "in": "query",
            "description": "the minimum discovered date",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "maxDiscoveredDate",
            "in": "query",
            "description": "the maximum discovered date",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PaginatedList[DevicesSearchResultDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/unassigned": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets a list of all devices that are not assigned to a space",
        "operationId": "Devices_Unassigned",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/discover": {
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Discovers all devices on the network",
        "operationId": "Devices_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/deleteall": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "WARNING: Deletes all devices in the system",
        "operationId": "Devices_DeleteAll",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/{type}/{id}": {
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Renames a device",
        "operationId": "Devices_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "the type of the device to be renamed",
            "required": true,
            "type": "string",
            "enum": [
              "Light",
              "Switch",
              "Dimmer",
              "MotionSensor",
              "LightSensor",
              "TemperatureSensor",
              "Relay"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device to be renamed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "device",
            "in": "body",
            "description": "the device containing the new name",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDeviceDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/{type}/{id}/space": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the space that contains the device",
        "operationId": "Devices_GetSpace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "the type of device",
            "required": true,
            "type": "string",
            "enum": [
              "Light",
              "Switch",
              "Dimmer",
              "MotionSensor",
              "LightSensor",
              "TemperatureSensor",
              "Relay"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceDto"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/devices/{type}/{id}/networknode": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Gets the network node associated with the device",
        "operationId": "Devices_GetNode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "the type of the device",
            "required": true,
            "type": "string",
            "enum": [
              "Light",
              "Switch",
              "Dimmer",
              "MotionSensor",
              "LightSensor",
              "TemperatureSensor",
              "Relay"
            ]
          },
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the device",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dimmers": {
      "get": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Gets a list of all dimmers in the system",
        "operationId": "Dimmers_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DimmerDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Creates a dimmer",
        "operationId": "Dimmers_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "dimmer",
            "in": "body",
            "description": "the dimmer to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDimmerDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dimmers/{id}": {
      "get": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Gets a dimmer",
        "operationId": "Dimmers_GetDimmer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the dimmer to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/DimmerDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Updates a dimmer",
        "operationId": "Dimmers_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the dimmer to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "dimmer",
            "in": "body",
            "description": "a dimmer containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDimmerDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Deletes a dimmer from the system",
        "operationId": "Dimmers_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the dimmer to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dimmers/discover": {
      "post": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Discovers all dimmers in the system",
        "operationId": "Dimmers_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/dimmers/{id}/events": {
      "get": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Gets a list of dimmer events",
        "operationId": "Dimmers_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the dimmer",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Dimmers"
        ],
        "summary": "Creates a dimmer event",
        "operationId": "DimmersEvent_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the dimmer",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "event",
            "in": "body",
            "description": "the event to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDimmerEventDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/health/ping": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Allows checking if the lighting server is available",
        "operationId": "Health_Ping",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/licensing/refresh": {
      "post": {
        "tags": [
          "Licensing"
        ],
        "operationId": "Licensing_RefreshLicense",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/lights": {
      "get": {
        "tags": [
          "Lights"
        ],
        "summary": "Gets a list of all lights in the system",
        "operationId": "Lights_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[LightDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Creates a light",
        "operationId": "Lights_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "light",
            "in": "body",
            "description": "the light to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLightDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}": {
      "get": {
        "tags": [
          "Lights"
        ],
        "summary": "Gets a light",
        "operationId": "Lights_GetLight",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LightDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Lights"
        ],
        "summary": "Updates a light",
        "operationId": "Lights_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "light",
            "in": "body",
            "description": "a light containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLightDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Lights"
        ],
        "summary": "Deletes a light from the system",
        "operationId": "Lights_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/discover": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Discovers all lights in the system",
        "operationId": "Lights_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}/turnon": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Turns on a light",
        "operationId": "Lights_TurnOn",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be turned on",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}/turnoff": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Turns off a light",
        "operationId": "Lights_TurnOff",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be turned off",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}/lighting": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Dims a light to a specified level",
        "operationId": "Lights_Lighting",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light to be dimmed",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lighting",
            "in": "body",
            "description": "the new lighting settings for the light",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LightingDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/lighting": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Sets lighting on multiple lights",
        "operationId": "Lights_BatchLighting",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "lighting",
            "in": "body",
            "description": "the ID and lighting settings for each light",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchLightingListDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}/events": {
      "get": {
        "tags": [
          "Lights"
        ],
        "summary": "Gets a list of light events",
        "operationId": "Lights_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lights/{id}/emergency-settings": {
      "post": {
        "tags": [
          "Lights"
        ],
        "summary": "Sets a light as an emergency light",
        "operationId": "Lights_PostEmergencySettings",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "settings",
            "in": "body",
            "description": "the emergency light settings",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmergencyLightingSettingsDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Lights"
        ],
        "summary": "Removes emergency light settings from a light",
        "operationId": "Lights_DeleteEmergencySettings",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lightsensors": {
      "get": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Gets a list of all light sensors in the system",
        "operationId": "LightSensors_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[LightSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Creates a light sensor",
        "operationId": "LightSensors_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "lightSensor",
            "in": "body",
            "description": "the light sensor to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLightSensorDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lightsensors/{id}": {
      "get": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Gets a light sensor",
        "operationId": "LightSensors_GetLightSensor",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light sensor to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LightSensorDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Updates a light sensor",
        "operationId": "LightSensors_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light sensor to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lightSensor",
            "in": "body",
            "description": "a light sensor containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateLightSensorDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Deletes a light sensor from the system",
        "operationId": "LightSensors_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light sensor to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lightsensors/discover": {
      "post": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Discovers all light sensors in the system",
        "operationId": "LightSensors_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lightsensors/{id}/events": {
      "get": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Gets a list of light sensor events",
        "operationId": "LightSensors_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "LightSensors"
        ],
        "summary": "Creates a light sensor event",
        "operationId": "LightSensorsEvent_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the light sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "event",
            "in": "body",
            "description": "the event to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateLightSensorEventDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/motionsensors": {
      "get": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Gets a list of all motion sensors in the system",
        "operationId": "MotionSensors_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[MotionSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Creates a motion sensor",
        "operationId": "MotionSensors_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "motionSensor",
            "in": "body",
            "description": "the motion sensor to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMotionSensorDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/motionsensors/{id}": {
      "get": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Gets a motion sensor",
        "operationId": "MotionSensors_GetMotionSensor",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the motion sensor to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/MotionSensorDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Updates a motion sensor",
        "operationId": "MotionSensors_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the motion sensor to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "motionSensor",
            "in": "body",
            "description": "a motion sensor containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateMotionSensorDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Deletes a motion sensor from the system",
        "operationId": "MotionSensors_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the motion sensor to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/motionsensors/discover": {
      "post": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Discovers all motion sensors in the system",
        "operationId": "MotionSensors_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/motionsensors/{id}/events": {
      "get": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Gets a list of motion sensor events",
        "operationId": "MotionSensors_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the motion sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "MotionSensors"
        ],
        "summary": "Creates a motion sensor event",
        "operationId": "MotionSensorsEvent_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the motion sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "event",
            "in": "body",
            "description": "the event to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateMotionSensorEventDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes": {
      "get": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Gets a list of all network nodes in the system",
        "operationId": "NetworkNodes_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[NodeDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Creates a network node",
        "operationId": "NetworkNodes_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "networkNode",
            "in": "body",
            "description": "the network node to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNetworkNodeDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes/{id}": {
      "get": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Gets a network node",
        "operationId": "NetworkNodes_GetNode",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the network node to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NodeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Updates a network node",
        "operationId": "NetworkNodes_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the network node to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "networkNode",
            "in": "body",
            "description": "the updated values for the network node",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateNetworkNodeDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Deletes a network node from the system",
        "operationId": "NetworkNodes_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the network node to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes/discover": {
      "post": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Discovers all network nodes in the system",
        "operationId": "NetworkNodes_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes/deleteall": {
      "delete": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "WARNING: Deletes all network nodes from the system.",
        "operationId": "NetworkNodes_DeleteAll",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes/{id}/devices": {
      "get": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Gets a list of devices attached to a network node",
        "operationId": "NetworkNodes_GetDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the network node",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/networknodes/{id}/devicenodes": {
      "get": {
        "tags": [
          "NetworkNodes"
        ],
        "summary": "Gets a list of device nodes attached to a network node",
        "operationId": "NetworkNodes_GetDeviceNodes",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the network node",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceNodeDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Gets all policies in the system",
        "operationId": "Policies_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[PolicyDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/policies/{id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Gets a policy",
        "operationId": "Policies_GetPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the policy to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Updates a policy",
        "operationId": "Policies_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the policy to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "policy",
            "in": "body",
            "description": "the updated values for the policy",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePolicyDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays": {
      "get": {
        "tags": [
          "Relays"
        ],
        "summary": "Gets a list of all relays in the system",
        "operationId": "Relays_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[RelayDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Relays"
        ],
        "summary": "Creates a relay",
        "operationId": "Relays_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "relay",
            "in": "body",
            "description": "the relay to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRelayDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays/{id}": {
      "get": {
        "tags": [
          "Relays"
        ],
        "summary": "Gets a relay",
        "operationId": "Relays_GetRelay",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RelayDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Relays"
        ],
        "summary": "Updates a relay",
        "operationId": "Relays_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "relay",
            "in": "body",
            "description": "a relay containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRelayDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Relays"
        ],
        "summary": "Deletes a relay from the system",
        "operationId": "Relays_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays/discover": {
      "post": {
        "tags": [
          "Relays"
        ],
        "summary": "Discovers all relays in the system",
        "operationId": "Relays_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays/{id}/events": {
      "get": {
        "tags": [
          "Relays"
        ],
        "summary": "Gets a list of relay events",
        "operationId": "Relays_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays/{id}/open": {
      "post": {
        "tags": [
          "Relays"
        ],
        "summary": "Opens the relay",
        "operationId": "Relays_OpenRelay",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay to be opened",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/relays/{id}/close": {
      "post": {
        "tags": [
          "Relays"
        ],
        "summary": "Closes the relay",
        "operationId": "Relays_CloseRelay",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the relay to be closed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/schedules": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Gets a list of schedules in the system",
        "operationId": "Schedules_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ScheduleDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Schedules"
        ],
        "summary": "Creates a schedule",
        "operationId": "Schedules_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "schedule",
            "in": "body",
            "description": "the schedule to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateScheduleDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/schedules/{id}": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Gets a schedule",
        "operationId": "Schedules_GetSchedule",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScheduleDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Schedules"
        ],
        "summary": "Updates a schedule",
        "operationId": "Schedules_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "schedule",
            "in": "body",
            "description": "the updated values for the schedule",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateScheduleDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Schedules"
        ],
        "summary": "Deletes a schedule from the system",
        "operationId": "Schedules_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/schedules/{id}/actionset": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Gets the action set assigned to the specified schedule",
        "operationId": "Schedules_GetActionSet",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of schedule",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ActionSetDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Schedules"
        ],
        "summary": "Sets the action set assigned to the schedule",
        "operationId": "Schedules_PutActionSet",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "actionSet",
            "in": "body",
            "description": "the action set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateScheduleActionSetDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Schedules"
        ],
        "summary": "Unsets the action set assigned to the schedule",
        "operationId": "Schedules_DeleteActionSet",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/schedules/{id}/events": {
      "get": {
        "tags": [
          "Schedules"
        ],
        "summary": "Gets a list of schedule events",
        "operationId": "Schedules_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the schedule",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of spaces in the system",
        "operationId": "Spaces_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[SpaceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a space",
        "operationId": "Spaces_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "space",
            "in": "body",
            "description": "the space to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSpaceDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a space",
        "operationId": "Spaces_GetSpace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Updates a space",
        "operationId": "Spaces_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "space",
            "in": "body",
            "description": "the updated values for the space",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSpaceDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes a space from the system",
        "operationId": "Spaces_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/turnon": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Turns on all lights in a space",
        "operationId": "Spaces_TurnOn",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space to be turned on",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/turnoff": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Turns off all lights in a space",
        "operationId": "Spaces_TurnOff",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space to be turned off",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/lighting": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Sets the level of the lights in a space",
        "operationId": "Spaces_Lighting",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "lighting",
            "in": "body",
            "description": "the lighting values to use for the space",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LightingDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/synchronize": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Synchronizes the state of all lights with the state of their space",
        "operationId": "Spaces_Synchronize",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/activepolicy": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of the active policy values for the space",
        "operationId": "Spaces_GetActivePolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ActivePolicyValueDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/zones": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of zones contained in a space",
        "operationId": "Spaces_GetZones",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[ZoneDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a new zone within a space",
        "operationId": "Spaces_PostZone",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "zone",
            "in": "body",
            "description": "the zone to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateZoneDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/zones/config/enter": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Enters the zone configuration mode for the space",
        "operationId": "Spaces_PostSetZoneConfig",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/zones/config/save": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Saves the zone configuration",
        "operationId": "Spaces_PostSaveZoneConfig",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/zones/config/exit": {
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Exits the zone configuration mode for the space",
        "operationId": "Spaces_PostClearZoneConfig",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/devices": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of devices contained in a space",
        "operationId": "Spaces_GetDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Adds a device to a space",
        "operationId": "Spaces_PutDevices",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "device",
            "in": "body",
            "description": "the device to be added to the space and a value indicting which attached devices to include",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddDeviceToSpaceDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/lights/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a light from a space",
        "operationId": "Spaces_DeleteLight",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the light to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/motionsensors/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a motion sensor from a space",
        "operationId": "Spaces_DeleteMotionSensor",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the motion sensor to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/lightsensors/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a light sensor from a space",
        "operationId": "Spaces_DeleteLightSensor",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the light sensor to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/temperaturesensors/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a temperature sensor from a space",
        "operationId": "Spaces_DeleteTemperatureSensor",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the temperature sensor to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/dimmers/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a dimmer from a space",
        "operationId": "Spaces_DeleteDimmer",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the dimmer to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/switches/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a switch from a space",
        "operationId": "Spaces_DeleteSwitch",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the switch to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/relays/{deviceId}": {
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Removes a relay from a space",
        "operationId": "Spaces_DeleteRelay",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the relay to remove",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/temperaturesensors": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of temperature sensors contained in a space",
        "operationId": "Spaces_GetTemperatureSensors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[TemperatureSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/policy": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a policy for a space",
        "operationId": "Spaces_GetSpacePolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Updates a policy for a space",
        "operationId": "Spaces_PutPolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "policy",
            "in": "body",
            "description": "the policy to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdatePolicyDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Spaces"
        ],
        "summary": "Creates a policy for a space",
        "operationId": "Spaces_PostPolicy",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "policy",
            "in": "body",
            "description": "the policy to be created for the space",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreatePolicyDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Spaces"
        ],
        "summary": "Deletes a policy for a space",
        "operationId": "Spaces_DeletePolicy",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/spacetype": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the type of the space",
        "operationId": "Spaces_GetType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceTypeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Spaces"
        ],
        "summary": "Sets the type of the space",
        "operationId": "Spaces_PutType",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "spaceType",
            "in": "body",
            "description": "the space type to be set",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceTypeDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/lights": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of lights in the space",
        "operationId": "Spaces_GetLights",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[LightDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/lightsensors": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of light sensors in the space",
        "operationId": "Spaces_GetLightSensors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[LightSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/motionsensors": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of motion sensors in the space",
        "operationId": "Spaces_GetMotionSensors",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[MotionSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/dimmers": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of dimmers in the space",
        "operationId": "Spaces_GetDimmers",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DimmerDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/switches": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of switches in the space",
        "operationId": "Spaces_GetSwitches",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[SwitchDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/relays": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of relays in the space",
        "operationId": "Spaces_GetRelays",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[RelayDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/timer": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets the vacancy timer for the space if one exists",
        "operationId": "Spaces_GetTimer",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceTimerDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/events": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of recent events for the space.",
        "operationId": "Spaces_GetSpaceEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spaces/{id}/events/all": {
      "get": {
        "tags": [
          "Spaces"
        ],
        "summary": "Gets a list of all events for the space",
        "operationId": "Spaces_GetAllSpaceEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spacetypes": {
      "get": {
        "tags": [
          "SpaceTypes"
        ],
        "summary": "Gets a list of space types in the system",
        "operationId": "SpaceTypes_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[SpaceTypeDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spacetypes/{id}": {
      "get": {
        "tags": [
          "SpaceTypes"
        ],
        "summary": "Gets a space type",
        "operationId": "SpaceTypes_GetSpaceType",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space type to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceTypeDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/spacetypes/{id}/policy": {
      "get": {
        "tags": [
          "SpaceTypes"
        ],
        "summary": "Gets the policy of a space type",
        "operationId": "SpaceTypes_GetPolicy",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the space type",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/switches": {
      "get": {
        "tags": [
          "Switches"
        ],
        "summary": "Gets a list of all switches in the system",
        "operationId": "Switches_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[SwitchDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Switches"
        ],
        "summary": "Creates a switch",
        "operationId": "Switches_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "switch",
            "in": "body",
            "description": "the switch to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSwitchDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/switches/{id}": {
      "get": {
        "tags": [
          "Switches"
        ],
        "summary": "Gets a switch",
        "operationId": "Switches_GetSwitch",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the switch to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SwitchDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Switches"
        ],
        "summary": "Updates a switch",
        "operationId": "Switches_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the switch to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "switch",
            "in": "body",
            "description": "a switch containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSwitchDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Switches"
        ],
        "summary": "Deletes a switch from the system",
        "operationId": "Switches_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the switch to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/switches/discover": {
      "post": {
        "tags": [
          "Switches"
        ],
        "summary": "Discovers all switches in the system",
        "operationId": "Switches_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/switches/{id}/events": {
      "get": {
        "tags": [
          "Switches"
        ],
        "summary": "Gets a list of switch events",
        "operationId": "Switches_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the switch",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Switches"
        ],
        "summary": "Creates a switch event",
        "operationId": "SwitchesEvent_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the switch",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "event",
            "in": "body",
            "description": "the event to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateSwitchEventDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/temperaturesensors": {
      "get": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Gets a list of all temperature sensors in the system",
        "operationId": "TemperatureSensors_Get",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[TemperatureSensorDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Creates a temperature sensor",
        "operationId": "TemperatureSensors_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "temperatureSensor",
            "in": "body",
            "description": "the temperature sensor to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTemperatureSensorDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/temperaturesensors/{id}": {
      "get": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Gets a temperature sensor",
        "operationId": "TemperatureSensors_GetTemperatureSensor",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the temperature sensor to be retrieved",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TemperatureSensorDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Updates a temperature sensor",
        "operationId": "TemperatureSensors_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the temperature sensor to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "temperatureSensor",
            "in": "body",
            "description": "a temperature sensor containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTemperatureSensorDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Deletes a temperature sensor from the system",
        "operationId": "TemperatureSensors_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the temperature sensor to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/temperaturesensors/discover": {
      "post": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Discovers all temperature sensors in the system",
        "operationId": "TemperatureSensors_Discover",
        "consumes": [],
        "produces": [],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/temperaturesensors/{id}/events": {
      "get": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Gets a list of temperature sensor events",
        "operationId": "TemperatureSensors_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the temperature sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "TemperatureSensors"
        ],
        "summary": "Creates a temperature sensor event",
        "operationId": "TemperatureSensorsEvent_Post",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the temperature sensor",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "event",
            "in": "body",
            "description": "the event to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTemperatureSensorEventDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applicationkeys/{applicationKeyId}/webhooks": {
      "get": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Gets a list of all web hooks in the system",
        "operationId": "WebHooks_GetAll",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "applicationKeyId",
            "in": "path",
            "description": "the ID of the application key",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[WebHookDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Registers a web hook",
        "operationId": "WebHooks_Register",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "applicationKeyId",
            "in": "path",
            "description": "the ID of the application key",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webHook",
            "in": "body",
            "description": "the web hook to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateWebHookDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/webhooks/supported-events": {
      "get": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Gets a list of supported web hook events",
        "operationId": "WebHooks_SupportedEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[String]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/applicationkeys/{applicationKeyId}/webhooks/{webHookId}": {
      "get": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Gets a web hook",
        "operationId": "WebHooks_GetById",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "applicationKeyId",
            "in": "path",
            "description": "the ID of the application key",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webHookId",
            "in": "path",
            "description": "the ID of the web hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebHookDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Updates a web hook",
        "operationId": "WebHooks_Update",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "applicationKeyId",
            "in": "path",
            "description": "the ID of the application key",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webHookId",
            "in": "path",
            "description": "the ID of the web hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webHook",
            "in": "body",
            "description": "a web hook containing the new values",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateWebHookDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "WebHooks"
        ],
        "summary": "Unregisters a web hook",
        "operationId": "WebHooks_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "applicationKeyId",
            "in": "path",
            "description": "the ID of the application key",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "webHookId",
            "in": "path",
            "description": "the ID of the web hook",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets a zone",
        "operationId": "Zones_GetZone",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone to be returned",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ZoneDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Zones"
        ],
        "summary": "Updates a zone",
        "operationId": "Zones_Put",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone to be updated",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "zone",
            "in": "body",
            "description": "the updated values for the zone",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateZoneDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Zones"
        ],
        "summary": "Deletes a zone from the system",
        "operationId": "Zones_Delete",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone to be deleted",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/space": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets the space containing a zone",
        "operationId": "Zones_GetSpace",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/SpaceDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/lightsensor": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets the light sensor contained in a zone",
        "operationId": "Zones_GetLightSensor",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LightSensorDto"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/devices": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets a list of devices contained in a zone",
        "operationId": "Zones_GetDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Zones"
        ],
        "summary": "Adds a device to a zone",
        "operationId": "Zones_PutDevices",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "device",
            "in": "body",
            "description": "the device to be added to the zone",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddDeviceToZoneDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/assignabledevices": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets a list of devices that can be added to a zone",
        "operationId": "Zones_GetAssignableDevices",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[DeviceDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/lights/{deviceId}": {
      "delete": {
        "tags": [
          "Zones"
        ],
        "summary": "Removes a light from a zone",
        "operationId": "Zones_DeleteLight",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the light to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/lightsensors/{deviceId}": {
      "delete": {
        "tags": [
          "Zones"
        ],
        "summary": "Removes a light sensor from a zone",
        "operationId": "Zones_DeleteLightSensor",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "the ID of the light sensor to be removed",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/zones/{id}/events": {
      "get": {
        "tags": [
          "Zones"
        ],
        "summary": "Gets a list of zone events",
        "operationId": "Zones_GetEvents",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the ID of the zone",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ListDto[EventDto]"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "definitions": {
    "ListDto[ActionDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionDto"
          }
        }
      }
    },
    "ActionDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "spaceId": {
          "format": "int32",
          "type": "integer"
        },
        "level": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreateActionDto": {
      "description": "The action",
      "required": [
        "type",
        "spaceId",
        "level"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The action type",
          "enum": [
            "TurnOff",
            "TurnOn",
            "Dim"
          ],
          "type": "string"
        },
        "spaceId": {
          "format": "int32",
          "description": "The space ID",
          "type": "integer"
        },
        "level": {
          "format": "int32",
          "description": "The level",
          "type": "integer"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[ActionDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/ActionDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UrlHelper": {
      "type": "object",
      "properties": {
        "request": {
          "type": "object"
        }
      }
    },
    "IContentNegotiator": {
      "type": "object",
      "properties": {}
    },
    "MediaTypeFormatter": {
      "type": "object",
      "properties": {
        "supportedMediaTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeHeaderValue"
          },
          "readOnly": true
        },
        "supportedEncodings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Encoding"
          },
          "readOnly": true
        },
        "mediaTypeMappings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeMapping"
          },
          "readOnly": true
        },
        "requiredMemberSelector": {
          "$ref": "#/definitions/IRequiredMemberSelector"
        }
      }
    },
    "MediaTypeHeaderValue": {
      "type": "object",
      "properties": {
        "charSet": {
          "type": "string"
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValueHeaderValue"
          },
          "readOnly": true
        },
        "mediaType": {
          "type": "string"
        }
      }
    },
    "Encoding": {
      "type": "object",
      "properties": {
        "bodyName": {
          "type": "string",
          "readOnly": true
        },
        "encodingName": {
          "type": "string",
          "readOnly": true
        },
        "headerName": {
          "type": "string",
          "readOnly": true
        },
        "webName": {
          "type": "string",
          "readOnly": true
        },
        "windowsCodePage": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        },
        "isBrowserDisplay": {
          "type": "boolean",
          "readOnly": true
        },
        "isBrowserSave": {
          "type": "boolean",
          "readOnly": true
        },
        "isMailNewsDisplay": {
          "type": "boolean",
          "readOnly": true
        },
        "isMailNewsSave": {
          "type": "boolean",
          "readOnly": true
        },
        "isSingleByte": {
          "type": "boolean",
          "readOnly": true
        },
        "encoderFallback": {
          "$ref": "#/definitions/EncoderFallback"
        },
        "decoderFallback": {
          "$ref": "#/definitions/DecoderFallback"
        },
        "isReadOnly": {
          "type": "boolean",
          "readOnly": true
        },
        "codePage": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "MediaTypeMapping": {
      "type": "object",
      "properties": {
        "mediaType": {
          "$ref": "#/definitions/MediaTypeHeaderValue",
          "readOnly": true
        }
      }
    },
    "IRequiredMemberSelector": {
      "type": "object",
      "properties": {}
    },
    "NameValueHeaderValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "readOnly": true
        },
        "value": {
          "type": "string"
        }
      }
    },
    "EncoderFallback": {
      "type": "object",
      "properties": {
        "maxCharCount": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "DecoderFallback": {
      "type": "object",
      "properties": {
        "maxCharCount": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "UpdateActionDto": {
      "description": "The action",
      "required": [
        "type",
        "spaceId",
        "level"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "The action type",
          "enum": [
            "TurnOff",
            "TurnOn",
            "Dim"
          ],
          "type": "string"
        },
        "spaceId": {
          "format": "int32",
          "description": "The space ID",
          "type": "integer"
        },
        "level": {
          "format": "int32",
          "description": "The level",
          "type": "integer"
        }
      }
    },
    "ListDto[EventDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventDto"
          }
        }
      }
    },
    "EventDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "dateTime": {
          "format": "date-time",
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "entityId": {
          "format": "int32",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "ListDto[ActionSetDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionSetDto"
          }
        }
      }
    },
    "ActionSetDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "CreateActionSetDto": {
      "description": "The action set",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The action set name",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[ActionSetDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/ActionSetDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateActionSetDto": {
      "description": "The action set",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The action set name",
          "type": "string"
        }
      }
    },
    "ListDto[ApplicationKeyDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ApplicationKeyDto"
          }
        }
      }
    },
    "ApplicationKeyDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "CreateApplicationKeyDto": {
      "description": "The application key",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The application key name",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[ApplicationKeyDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/ApplicationKeyDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateApplicationKeyDto": {
      "description": "The application key",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The application key name",
          "type": "string"
        }
      }
    },
    "ListDto[DashboardDeviceStatusByDeviceTypeDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardDeviceStatusByDeviceTypeDto"
          }
        }
      }
    },
    "DashboardDeviceStatusByDeviceTypeDto": {
      "type": "object",
      "properties": {
        "deviceType": {
          "type": "string"
        },
        "deviceTypeSingular": {
          "type": "string",
          "readOnly": true
        },
        "onlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "offlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ListDto[DashboardDeviceStatusByNetworkSwitchDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardDeviceStatusByNetworkSwitchDto"
          }
        }
      }
    },
    "DashboardDeviceStatusByNetworkSwitchDto": {
      "type": "object",
      "properties": {
        "networkSwitchName": {
          "type": "string"
        },
        "networkSwitchIpAddress": {
          "type": "string"
        },
        "onlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "offlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ListDto[DashboardDeviceStatusBySpaceDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DashboardDeviceStatusBySpaceDto"
          }
        }
      }
    },
    "DashboardDeviceStatusBySpaceDto": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "int32",
          "type": "integer"
        },
        "spaceName": {
          "type": "string"
        },
        "onlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "offlineCount": {
          "format": "int32",
          "type": "integer"
        },
        "total": {
          "format": "int32",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "ListDto[DeviceNodeDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceNodeDto"
          }
        }
      }
    },
    "DeviceNodeDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreateDeviceNodeDto": {
      "description": "The device node",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this device node",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[DeviceNodeDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/DeviceNodeDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateDeviceNodeDto": {
      "description": "The device node",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "NodeDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "isEmergency": {
          "type": "boolean"
        },
        "emergencyTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "emergencyLightLevel": {
          "format": "int32",
          "type": "integer"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "ListDto[DeviceDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeviceDto"
          }
        }
      }
    },
    "DeviceDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "spaceId": {
          "format": "int32",
          "type": "integer"
        },
        "nodeId": {
          "format": "int32",
          "type": "integer"
        },
        "spaceName": {
          "type": "string"
        },
        "isEmergency": {
          "type": "boolean"
        },
        "isLight": {
          "type": "boolean",
          "readOnly": true
        },
        "isRelay": {
          "type": "boolean",
          "readOnly": true
        },
        "lightType": {
          "type": "string"
        },
        "relayType": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "PaginatedList[DevicesSearchResultDto]": {
      "type": "object",
      "properties": {
        "filteredCount": {
          "format": "int32",
          "type": "integer"
        },
        "totalCount": {
          "format": "int32",
          "type": "integer"
        },
        "page": {
          "format": "int32",
          "type": "integer"
        },
        "pageSize": {
          "format": "int32",
          "type": "integer"
        },
        "pageCount": {
          "format": "int32",
          "type": "integer"
        },
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DevicesSearchResultDto"
          }
        },
        "hasPreviousPage": {
          "type": "boolean",
          "readOnly": true
        },
        "hasNextPage": {
          "type": "boolean",
          "readOnly": true
        }
      }
    },
    "DevicesSearchResultDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "nodeId": {
          "format": "int32",
          "type": "integer"
        },
        "spaceId": {
          "format": "int32",
          "type": "integer"
        },
        "spaceName": {
          "type": "string"
        },
        "networkSwitchName": {
          "type": "string"
        },
        "networkSwitchIpAddress": {
          "type": "string"
        },
        "networkSwitchPortId": {
          "type": "string"
        },
        "networkSwitchPortDescription": {
          "type": "string"
        },
        "isEmergency": {
          "type": "boolean"
        },
        "isLight": {
          "type": "boolean",
          "readOnly": true
        },
        "isRelay": {
          "type": "boolean",
          "readOnly": true
        },
        "lightType": {
          "type": "string"
        },
        "relayType": {
          "type": "string"
        }
      }
    },
    "UpdateDeviceDto": {
      "description": "The device",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        }
      }
    },
    "SpaceDto": {
      "description": "The space",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The space ID",
          "type": "integer"
        },
        "name": {
          "description": "The space name",
          "type": "string"
        },
        "mode": {
          "description": "The space mode (Occupancy, Vacancy)",
          "type": "string"
        },
        "areZonesDisabled": {
          "description": "Whether zones are disabled for this space",
          "type": "boolean"
        },
        "state": {
          "description": "The space state (On, Off)",
          "type": "string"
        },
        "level": {
          "format": "int32",
          "description": "The space level (0-10000)",
          "type": "integer"
        },
        "kelvin": {
          "format": "int32",
          "description": "The color temperature of the space in Kelvin",
          "type": "integer"
        },
        "hasTunableLights": {
          "description": "Whether the space has tunable lights",
          "type": "boolean"
        },
        "minimumKelvin": {
          "format": "int32",
          "description": "The minimum color temperature in Kelvin",
          "type": "integer"
        },
        "maximumKelvin": {
          "format": "int32",
          "description": "The maximum color temperature in Kelvin",
          "type": "integer"
        }
      }
    },
    "ListDto[DimmerDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DimmerDto"
          }
        }
      }
    },
    "DimmerDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "level": {
          "format": "int32",
          "type": "integer"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreateDimmerDto": {
      "description": "The dimmer",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this dimmer",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[DimmerDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/DimmerDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateDimmerDto": {
      "description": "The dimmer",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreateDimmerEventDto": {
      "required": [
        "level"
      ],
      "type": "object",
      "properties": {
        "level": {
          "format": "int32",
          "description": "The dimmer level (0-100)",
          "type": "integer"
        }
      }
    },
    "ListDto[LightDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LightDto"
          }
        }
      }
    },
    "LightDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "level": {
          "format": "int32",
          "description": "The current light level.",
          "type": "integer"
        },
        "minLevel": {
          "format": "int32",
          "type": "integer"
        },
        "maxLevel": {
          "format": "int32",
          "type": "integer"
        },
        "isEmergency": {
          "type": "boolean"
        },
        "emergencyTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "emergencyLightLevel": {
          "format": "int32",
          "type": "integer"
        },
        "lightType": {
          "type": "string"
        },
        "minimumKelvin": {
          "format": "int32",
          "type": "integer"
        },
        "maximumKelvin": {
          "format": "int32",
          "type": "integer"
        },
        "kelvin": {
          "format": "int32",
          "type": "integer"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreateLightDto": {
      "description": "The light",
      "required": [
        "externalId",
        "lightType",
        "minLevel",
        "maxLevel",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this light",
          "type": "string"
        },
        "lightType": {
          "description": "The type of light (Individual, Tunable, Rgb)",
          "type": "string"
        },
        "minimumKelvin": {
          "format": "int32",
          "description": "The minimum Kelvin value of the light or null",
          "type": "integer"
        },
        "maximumKelvin": {
          "format": "int32",
          "description": "The maximum Kelvin value of the light or null",
          "type": "integer"
        },
        "minLevel": {
          "format": "int32",
          "description": "The minimum light level (0-10000)",
          "type": "integer"
        },
        "maxLevel": {
          "format": "int32",
          "description": "The maximum light level (0-10000)",
          "type": "integer"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[LightDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/LightDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateLightDto": {
      "description": "The light",
      "required": [
        "minLevel",
        "maxLevel",
        "name"
      ],
      "type": "object",
      "properties": {
        "minLevel": {
          "format": "int32",
          "description": "The minimum light level (0-10000)",
          "type": "integer"
        },
        "maxLevel": {
          "format": "int32",
          "description": "The maximum light level (0-10000)",
          "type": "integer"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "LightingDto": {
      "type": "object",
      "properties": {
        "level": {
          "format": "int32",
          "description": "The lighting level",
          "type": "integer",
          "readOnly": true
        },
        "kelvin": {
          "format": "int32",
          "description": "The color temperature of the lighitng in Kelvin",
          "type": "integer",
          "readOnly": true
        },
        "behavior": {
          "description": "The smooth ramp behavior",
          "enum": [
            "ConstantDuration",
            "Variable",
            "ConstantRate"
          ],
          "type": "string",
          "readOnly": true
        },
        "curveType": {
          "description": "The smooth ramp curve type",
          "enum": [
            "None",
            "Linear",
            "SquareLaw",
            "Dali"
          ],
          "type": "string",
          "readOnly": true
        },
        "duration": {
          "format": "int32",
          "description": "The smooth ramp duration in milliseconds",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "BatchLightingListDto": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/BatchLightingDto"
          }
        }
      }
    },
    "BatchLightingDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The light ID",
          "type": "integer",
          "readOnly": true
        },
        "level": {
          "format": "int32",
          "description": "The lighting level",
          "type": "integer",
          "readOnly": true
        },
        "kelvin": {
          "format": "int32",
          "description": "The color temperature of the lighitng in Kelvin",
          "type": "integer",
          "readOnly": true
        },
        "behavior": {
          "description": "The smooth ramp behavior",
          "enum": [
            "ConstantDuration",
            "Variable",
            "ConstantRate"
          ],
          "type": "string",
          "readOnly": true
        },
        "curveType": {
          "description": "The smooth ramp curve type",
          "enum": [
            "None",
            "Linear",
            "SquareLaw",
            "Dali"
          ],
          "type": "string",
          "readOnly": true
        },
        "duration": {
          "format": "int32",
          "description": "The smooth ramp duration in milliseconds",
          "type": "integer",
          "readOnly": true
        }
      }
    },
    "EmergencyLightingSettingsDto": {
      "description": "The emergency lighting settings",
      "type": "object",
      "properties": {
        "lightId": {
          "format": "int32",
          "description": "The light ID",
          "type": "integer"
        },
        "timeout": {
          "format": "int32",
          "description": "The timeout in milliseconds (5000-30000) before the emergency light turns on (0=disable)",
          "type": "integer"
        },
        "lightLevel": {
          "format": "int32",
          "description": "The lighting level during emergency",
          "type": "integer"
        }
      }
    },
    "ListDto[LightSensorDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LightSensorDto"
          }
        }
      }
    },
    "LightSensorDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "minSensorLevel": {
          "format": "int32",
          "type": "integer"
        },
        "maxSensorLevel": {
          "format": "int32",
          "type": "integer"
        },
        "minIlluminance": {
          "format": "int32",
          "type": "integer"
        },
        "maxIlluminance": {
          "format": "int32",
          "type": "integer"
        },
        "sensorLevel": {
          "format": "int32",
          "type": "integer"
        },
        "illuminance": {
          "format": "double",
          "type": "number"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreateLightSensorDto": {
      "description": "The light sensor",
      "required": [
        "externalId",
        "minSensorLevel",
        "maxSensorLevel",
        "minIlluminance",
        "maxIlluminance",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this light sensor",
          "type": "string"
        },
        "minSensorLevel": {
          "format": "int32",
          "description": "The minimum sensor level",
          "type": "integer"
        },
        "maxSensorLevel": {
          "format": "int32",
          "description": "The maximum sensor level",
          "type": "integer"
        },
        "minIlluminance": {
          "format": "int32",
          "description": "The minimum illuminance",
          "type": "integer"
        },
        "maxIlluminance": {
          "format": "int32",
          "description": "The maximum illuminance",
          "type": "integer"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[LightSensorDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/LightSensorDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateLightSensorDto": {
      "description": "The light sensor",
      "required": [
        "minSensorLevel",
        "maxSensorLevel",
        "minIlluminance",
        "maxIlluminance",
        "name"
      ],
      "type": "object",
      "properties": {
        "minSensorLevel": {
          "format": "int32",
          "description": "The minimum sensor level",
          "type": "integer"
        },
        "maxSensorLevel": {
          "format": "int32",
          "description": "The maximum sensor level",
          "type": "integer"
        },
        "minIlluminance": {
          "format": "int32",
          "description": "The minimum illuminance",
          "type": "integer"
        },
        "maxIlluminance": {
          "format": "int32",
          "description": "The maximum illuminance",
          "type": "integer"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreateLightSensorEventDto": {
      "description": "The light sensor event",
      "required": [
        "sensorLevel"
      ],
      "type": "object",
      "properties": {
        "sensorLevel": {
          "format": "int32",
          "description": "The sensor level",
          "type": "integer"
        }
      }
    },
    "ListDto[MotionSensorDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MotionSensorDto"
          }
        }
      }
    },
    "MotionSensorDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreateMotionSensorDto": {
      "description": "The motion sensor",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this motion sensor",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[MotionSensorDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/MotionSensorDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateMotionSensorDto": {
      "description": "The motion sensor",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreateMotionSensorEventDto": {
      "description": "The motion sensor",
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "description": "The motion sensor state",
          "enum": [
            "Vacancy",
            "Occupancy"
          ],
          "type": "string"
        }
      }
    },
    "ListDto[NodeDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeDto"
          }
        }
      }
    },
    "CreateNetworkNodeDto": {
      "description": "The network node",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this network node",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[NodeDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/NodeDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateNetworkNodeDto": {
      "description": "The network node",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "ListDto[PolicyDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyDto"
          }
        }
      }
    },
    "PolicyDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "minimumLightLevel": {
          "format": "int32",
          "type": "integer"
        },
        "maximumLightLevel": {
          "format": "int32",
          "type": "integer"
        },
        "occupancyTimeout": {
          "format": "int32",
          "type": "integer"
        },
        "spaceTypeId": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "UpdatePolicyDto": {
      "description": "The policy",
      "type": "object",
      "properties": {
        "minimumLightLevel": {
          "format": "int32",
          "description": "The minimum light level",
          "type": "integer"
        },
        "maximumLightLevel": {
          "format": "int32",
          "description": "The maximum light level",
          "type": "integer"
        },
        "occupancyTimeout": {
          "format": "int32",
          "description": "The occupancy timeout",
          "type": "integer"
        }
      }
    },
    "ListDto[RelayDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelayDto"
          }
        }
      }
    },
    "RelayDto": {
      "type": "object",
      "properties": {
        "properties": {
          "type": "string"
        },
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "isInverted": {
          "type": "boolean"
        }
      }
    },
    "CreateRelayDto": {
      "description": "The relay to be created",
      "required": [
        "externalId",
        "isInverted",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this relay.",
          "type": "string"
        },
        "isInverted": {
          "description": "Should this relay invert its commands. This means turning a space \"on\" would open the relay.",
          "type": "boolean"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "UpdateRelayDto": {
      "description": "The relay to be updated",
      "required": [
        "isInverted",
        "name"
      ],
      "type": "object",
      "properties": {
        "isInverted": {
          "description": "Should this relay invert its commands. This means turning a space \"on\" would open the relay.",
          "type": "boolean"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "ListDto[ScheduleDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScheduleDto"
          }
        }
      }
    },
    "ScheduleDto": {
      "required": [
        "name",
        "cronExpression"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "cronExpression": {
          "type": "string"
        }
      }
    },
    "CreateScheduleDto": {
      "description": "The schedule",
      "required": [
        "name",
        "cronExpression"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The schedule name",
          "type": "string"
        },
        "cronExpression": {
          "description": "The cron expression",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[ScheduleDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/ScheduleDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateScheduleDto": {
      "description": "The schedule",
      "required": [
        "name",
        "cronExpression"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The schedule name",
          "type": "string"
        },
        "cronExpression": {
          "description": "The cron expression",
          "type": "string"
        }
      }
    },
    "UpdateScheduleActionSetDto": {
      "description": "The action set",
      "required": [
        "id"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The action set ID",
          "type": "integer"
        }
      }
    },
    "ListDto[SpaceDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceDto"
          }
        }
      }
    },
    "CreateSpaceDto": {
      "description": "The space",
      "required": [
        "name",
        "mode"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The space name",
          "type": "string"
        },
        "mode": {
          "description": "The space mode",
          "enum": [
            "Occupancy",
            "Vacancy"
          ],
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[SpaceDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/SpaceDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateSpaceDto": {
      "description": "The space",
      "required": [
        "name",
        "mode"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The space name",
          "type": "string"
        },
        "mode": {
          "description": "The space mode",
          "enum": [
            "Occupancy",
            "Vacancy"
          ],
          "type": "string"
        }
      }
    },
    "ListDto[ActivePolicyValueDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActivePolicyValueDto"
          }
        }
      }
    },
    "ActivePolicyValueDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "format": "int32",
          "type": "integer"
        },
        "policyId": {
          "format": "int32",
          "type": "integer"
        },
        "policyType": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "ListDto[ZoneDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ZoneDto"
          }
        }
      }
    },
    "ZoneDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "setpoint": {
          "format": "double",
          "type": "number"
        },
        "deadband": {
          "format": "double",
          "type": "number"
        },
        "bias": {
          "format": "int32",
          "type": "integer"
        },
        "gain": {
          "format": "double",
          "type": "number"
        },
        "timeDelay": {
          "format": "int32",
          "type": "integer"
        },
        "raiseDimRate": {
          "format": "double",
          "type": "number"
        },
        "lowerDimRate": {
          "format": "double",
          "type": "number"
        },
        "level": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "CreateZoneDto": {
      "description": "The zone",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The zone name",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[ZoneDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/ZoneDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "AddDeviceToSpaceDto": {
      "description": "The device",
      "required": [
        "deviceId",
        "deviceType",
        "includeAttachedDevices"
      ],
      "type": "object",
      "properties": {
        "deviceId": {
          "format": "int32",
          "description": "The device ID",
          "type": "integer"
        },
        "deviceType": {
          "description": "The device type",
          "enum": [
            "Light",
            "Switch",
            "Dimmer",
            "MotionSensor",
            "LightSensor",
            "TemperatureSensor",
            "Relay"
          ],
          "type": "string"
        },
        "includeAttachedDevices": {
          "description": "Specifies whether other attached devices should also be added to the space",
          "enum": [
            "None",
            "AllOnNode",
            "AllOnChain"
          ],
          "type": "string"
        }
      }
    },
    "ListDto[TemperatureSensorDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TemperatureSensorDto"
          }
        }
      }
    },
    "TemperatureSensorDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "temperature": {
          "format": "double",
          "type": "number"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "CreatePolicyDto": {
      "description": "The policy",
      "type": "object",
      "properties": {
        "minimumLightLevel": {
          "format": "int32",
          "description": "The minimum light level",
          "type": "integer"
        },
        "maximumLightLevel": {
          "format": "int32",
          "description": "The maximum light level",
          "type": "integer"
        },
        "occupancyTimeout": {
          "format": "int32",
          "description": "The occupancy timeout",
          "type": "integer"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[PolicyDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/PolicyDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "SpaceTypeDto": {
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "description": "The space type ID",
          "type": "integer"
        },
        "name": {
          "description": "The space type name",
          "type": "string"
        }
      }
    },
    "ListDto[SwitchDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwitchDto"
          }
        }
      }
    },
    "SwitchDto": {
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "protocol": {
          "type": "string"
        },
        "externalId": {
          "type": "string"
        },
        "discoveredDate": {
          "format": "date-time",
          "type": "string"
        },
        "isOnline": {
          "type": "boolean"
        },
        "state": {
          "type": "string"
        },
        "properties": {
          "type": "string"
        }
      }
    },
    "SpaceTimerDto": {
      "type": "object",
      "properties": {
        "spaceId": {
          "format": "int32",
          "type": "integer"
        },
        "timeOut": {
          "format": "int32",
          "type": "integer"
        },
        "expiresIn": {
          "format": "int32",
          "type": "integer"
        },
        "dateTimeStarted": {
          "format": "date-time",
          "type": "string"
        },
        "dateTimeExpires": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "ListDto[SpaceTypeDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpaceTypeDto"
          }
        }
      }
    },
    "CreateSwitchDto": {
      "description": "The switch",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this switch",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[SwitchDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/SwitchDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateSwitchDto": {
      "description": "The switch",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreateSwitchEventDto": {
      "description": "The switch event",
      "required": [
        "state"
      ],
      "type": "object",
      "properties": {
        "state": {
          "description": "The switch state",
          "enum": [
            "Off",
            "On"
          ],
          "type": "string"
        }
      }
    },
    "CreateTemperatureSensorDto": {
      "description": "The temperature sensor",
      "required": [
        "externalId",
        "name"
      ],
      "type": "object",
      "properties": {
        "externalId": {
          "description": "The external system's ID for this temperature sensor",
          "type": "string"
        },
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[TemperatureSensorDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/TemperatureSensorDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "UpdateTemperatureSensorDto": {
      "description": "The temperature sensor",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The device name",
          "type": "string"
        },
        "properties": {
          "description": "The external system's device properties",
          "type": "string"
        }
      }
    },
    "CreateTemperatureSensorEventDto": {
      "description": "The temperature sensor event",
      "required": [
        "temperature"
      ],
      "type": "object",
      "properties": {
        "temperature": {
          "format": "double",
          "description": "The temperature",
          "type": "number"
        }
      }
    },
    "ListDto[WebHookDto]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebHookDto"
          }
        }
      }
    },
    "WebHookDto": {
      "required": [
        "domainEvents",
        "callbackUrl"
      ],
      "type": "object",
      "properties": {
        "id": {
          "format": "int32",
          "type": "integer"
        },
        "domainEvents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "callbackUrl": {
          "type": "string"
        },
        "applicationKeyId": {
          "format": "int32",
          "type": "integer"
        },
        "applicationKey": {
          "type": "string"
        }
      }
    },
    "CreateWebHookDto": {
      "description": "The web hook",
      "required": [
        "domainEvents",
        "callbackUrl"
      ],
      "type": "object",
      "properties": {
        "domainEvents": {
          "description": "The domain events associated with this web hook",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "callbackUrl": {
          "description": "The callback URL",
          "type": "string"
        }
      }
    },
    "CreatedAtRouteNegotiatedContentResult[WebHookDto]": {
      "type": "object",
      "properties": {
        "routeName": {
          "type": "string",
          "readOnly": true
        },
        "routeValues": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          },
          "readOnly": true
        },
        "content": {
          "$ref": "#/definitions/WebHookDto",
          "readOnly": true
        },
        "urlFactory": {
          "$ref": "#/definitions/UrlHelper",
          "readOnly": true
        },
        "contentNegotiator": {
          "$ref": "#/definitions/IContentNegotiator",
          "readOnly": true
        },
        "request": {
          "type": "object",
          "readOnly": true
        },
        "formatters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MediaTypeFormatter"
          },
          "readOnly": true
        }
      }
    },
    "ListDto[String]": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UpdateWebHookDto": {
      "description": "The web hook",
      "required": [
        "domainEvents",
        "callbackUrl"
      ],
      "type": "object",
      "properties": {
        "domainEvents": {
          "description": "The domain events associated with this web hook",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "callbackUrl": {
          "description": "The callback URL",
          "type": "string"
        }
      }
    },
    "UpdateZoneDto": {
      "description": "The zone",
      "required": [
        "name"
      ],
      "type": "object",
      "properties": {
        "name": {
          "description": "The zone name",
          "type": "string"
        },
        "setpoint": {
          "format": "double",
          "description": "The setpoint",
          "type": "number"
        },
        "deadband": {
          "format": "double",
          "description": "The deadband",
          "type": "number"
        },
        "bias": {
          "format": "int32",
          "description": "The bias",
          "type": "integer"
        },
        "gain": {
          "format": "double",
          "description": "The gain",
          "type": "number"
        },
        "timeDelay": {
          "format": "int32",
          "description": "The time delay",
          "type": "integer"
        },
        "raiseDimRate": {
          "format": "double",
          "description": "The raise dim rate",
          "type": "number"
        },
        "lowerDimRate": {
          "format": "double",
          "description": "The lower dim rate",
          "type": "number"
        }
      }
    },
    "AddDeviceToZoneDto": {
      "description": "The device",
      "required": [
        "deviceId",
        "deviceType"
      ],
      "type": "object",
      "properties": {
        "deviceId": {
          "format": "int32",
          "description": "The device ID",
          "type": "integer"
        },
        "deviceType": {
          "description": "The device type",
          "enum": [
            "Light",
            "Switch",
            "Dimmer",
            "MotionSensor",
            "LightSensor",
            "TemperatureSensor",
            "Relay"
          ],
          "type": "string"
        }
      }
    }
  }
}